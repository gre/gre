//~~~ This first part of the code defines a cursive alphabet. ~~~//

// letters has been drawn in Excalidraw, exported as SVG path, parsed as a "Curve"
// a "Curve" is an Array of [a,b,c] points which are used as quadratic curve points
// a point is represented also as a [x,y] array (like a tuple)

function parseCurve(txt) {
  return txt
    .trim()
    .split("C")
    .filter(Boolean)
    .map((t) =>
      t.split(",").map((t) =>
        t
          .trim()
          .split(" ")
          .map((t) => parseFloat(t))
      )
    );
}

/*
const A = {
  width: 126,
  curve: parseCurve(
    "C4.83 -1.53, 16.76 -2.48, 28.96 -9.19 C41.16 -15.9, 69.9 -32.54, 73.18 -40.24 C76.47 -47.94, 59.09 -55.85, 48.67 -55.39 C38.25 -54.93, 12.45 -50.27, 10.68 -37.47 C8.92 -24.67, 26.84 14.48, 38.08 21.41 C49.32 28.35, 72.57 15.55, 78.14 4.15 C83.71 -7.26, 70.83 -47.79, 71.51 -47.03 C72.2 -46.28, 77.82 -3.54, 82.26 8.67 C86.71 20.87, 90.89 27.58, 98.17 26.2 C105.45 24.82, 121.31 4.71, 126 0"
  ),
};
const B = {
  width: 147.07,
  curve: parseCurve(
    "C17.23 -19.87, 86.37 -88.36, 103.41 -119.2 C120.44 -150.03, 113.32 -209.44, 102.23 -185.03 C91.13 -160.62, 33.24 -7.85, 36.83 27.24 C40.43 62.34, 110.07 38.97, 123.79 25.54 C137.52 12.11, 131.16 -45.74, 119.2 -53.33 C107.23 -60.92, 59.06 -34.09, 52.01 -20 C44.95 -5.92, 61.01 27.93, 76.85 31.17 C92.69 34.41, 135.36 4.74, 147.07 0."
  ),
};
const C = {
  width: 128.07,
  curve: parseCurve(
    "C5.52 -7.43, 22.83 -31.98, 33.13 -44.55 C43.43 -57.13, 49.58 -71.83, 61.8 -75.45 C74.02 -79.08, 106.38 -66.49, 106.44 -66.3 C106.5 -66.1, 74.46 -79.47, 62.17 -74.28 C49.88 -69.09, 31.82 -50.47, 32.7 -35.15 C33.58 -19.83, 51.56 11.21, 67.45 17.62 C83.35 24.04, 117.97 5.73, 128.07 0."
  ),
};
const D = {
  width: 121.38,
  curve: parseCurve(
    "C2.29 -3.38, 2.22 -13.45, 13.75 -20.26 C25.29 -27.07, 69.06 -40.78, 69.21 -40.87 C69.36 -40.96, 21.41 -31.66, 14.63 -20.79 C7.86 -9.92, 19.25 19.85, 28.56 24.34 C37.87 28.83, 63.13 16.57, 70.49 6.14 C77.86 -4.28, 71.57 -8.93, 72.75 -38.24 C73.94 -67.54, 77.17 -170.01, 77.61 -169.69 C78.06 -169.37, 74.62 -65.12, 75.43 -36.31 C76.25 -7.49, 78.59 -5.86, 82.5 3.22 C86.42 12.31, 92.45 18.44, 98.93 18.21 C105.4 17.98, 117.64 4.58, 121.38 0."
  ),
};
const E = {
  width: 98.75,
  curve: parseCurve(
    "C11.58 -4.77, 60.04 -17.32, 69.46 -28.64 C78.88 -39.96, 65.94 -63.39, 56.52 -67.94 C47.1 -72.48, 16.03 -69.93, 12.95 -55.89 C9.86 -41.86, 23.72 6.82, 38.02 16.28 C52.32 25.74, 88.63 3.43, 98.75 0."
  ),
};
const F = {
  width: 75,
  curve: parseCurve(
    "C9.78 -11.79, 49.21 -43.95, 58.69 -70.71 C68.17 -97.47, 63.93 -145.74, 56.89 -160.55 C49.84 -175.36, 16.37 -208.05, 16.43 -159.56 C16.49 -111.07, 56.83 93.59, 57.23 130.37 C57.63 167.15, 15.85 83.08, 18.82 61.12 C21.79 39.16, 65.67 9.05, 75 0"
  ),
};
const G = {
  width: 123.52,
  curve: parseCurve(
    "C11.74 -4.79, 60.15 -17.95, 70.43 -28.75 C80.71 -39.55, 71.26 -60.28, 61.68 -64.8 C52.1 -69.32, 18.43 -68.5, 12.95 -55.89 C7.46 -43.29, 17.97 1.03, 28.79 10.82 C39.61 20.61, 70.36 12.45, 77.89 2.84 C85.42 -6.77, 71.91 -66.86, 73.96 -46.83 C76 -26.81, 95.13 92.22, 90.18 123 C85.23 153.78, 48.76 147.06, 44.26 137.87 C39.76 128.67, 49.97 91.04, 63.18 67.83 C76.39 44.62, 113.46 10.14, 123.52 0."
  ),
};
const H = {
  width: 132.03,
  curve: parseCurve(
    "C10.5 -11.99, 52.98 -44.55, 63.02 -71.95 C73.07 -99.35, 68.03 -149.78, 60.26 -164.39 C52.5 -178.99, 19.63 -189.6, 16.43 -159.56 C13.23 -129.52, 36.54 -3.49, 41.06 15.85 C45.58 35.19, 36.32 -32.09, 43.56 -43.51 C50.79 -54.92, 74.73 -62.2, 84.46 -52.63 C94.19 -43.06, 94.03 5.69, 101.96 13.9 C109.89 22.11, 127.01 -0.49, 132.03 0."
  ),
};
const I = {
  width: 64.28,
  curve: parseCurve(
    "C3.17 -3.19, 15.48 -7.62, 19.04 -19.14 C22.59 -30.65, 19.03 -59.24, 21.32 -69.1 C23.61 -78.96, 31.72 -75.18, 32.78 -78.3 C33.84 -81.42, 29.82 -86.49, 27.66 -87.81 C25.49 -89.14, 21.41 -87.69, 19.78 -86.26 C18.15 -84.82, 16.43 -80.69, 17.87 -79.2 C19.31 -77.71, 27.55 -76.73, 28.43 -77.31 C29.31 -77.89, 24.49 -92.58, 23.17 -82.69 C21.85 -72.79, 17.9 -33.42, 20.51 -17.92 C23.12 -2.42, 31.54 7.46, 38.83 10.34 C46.12 13.22, 60.04 1.19, 64.28 0."
  ),
};
const J = {
  width: 64.92,
  curve: parseCurve(
    "C2.62 -5.16, 10.7 -20.05, 15.73 -30.98 C20.77 -41.92, 25.89 -58.3, 30.21 -65.6 C34.53 -72.91, 40.61 -71.68, 41.67 -74.8 C42.72 -77.92, 38.71 -82.99, 36.54 -84.32 C34.38 -85.65, 30.3 -84.2, 28.67 -82.76 C27.03 -81.33, 25.32 -77.2, 26.76 -75.71 C28.2 -74.21, 36.43 -73.23, 37.32 -73.81 C38.2 -74.4, 32.32 -87.12, 32.06 -79.19 C31.79 -71.27, 33.1 -46.28, 35.73 -26.27 C38.37 -6.25, 46.29 19.86, 47.89 40.9 C49.48 61.94, 50.27 91.35, 45.3 99.96 C40.33 108.57, 20.4 105.01, 18.07 92.55 C15.74 80.09, 23.52 40.55, 31.33 25.18 C39.14 9.8, 59.32 4.46, 64.92 0."
  ),
};
const K = {
  width: 133.11,
  curve: parseCurve(
    "C10.5 -11.99, 52.98 -44.55, 63.02 -71.95 C73.07 -99.35, 68.03 -149.78, 60.26 -164.39 C52.5 -178.99, 19.63 -189.6, 16.43 -159.56 C13.23 -129.52, 36.54 -3.49, 41.06 15.85 C45.58 35.19, 34.1 -32.35, 43.56 -43.51 C53.01 -54.66, 96.7 -56, 97.79 -51.1 C98.87 -46.19, 49.62 -26.44, 50.07 -14.08 C50.53 -1.71, 86.67 20.62, 100.51 23.08 C114.35 25.53, 127.68 4.38, 133.11 0."
  ),
};
const L = {
  width: 103.66,
  curve: parseCurve(
    "C9.78 -11.79, 49.21 -43.95, 58.69 -70.71 C68.17 -97.47, 63.93 -145.74, 56.89 -160.55 C49.84 -175.36, 16.19 -187.15, 16.43 -159.56 C16.67 -131.97, 43.8 -21.09, 58.34 5 C72.88 31.09, 96.11 -1.68, 103.66 0."
  ),
};
const M = {
  width: 158.45,
  curve: parseCurve(
    "C3.23 -2.83, 15.46 -4.91, 19.38 -16.98 C23.3 -29.05, 18.26 -61.12, 23.51 -72.4 C28.76 -83.68, 45.59 -96.78, 50.89 -84.66 C56.19 -72.53, 53.95 -0.15, 55.3 0.32 C56.65 0.79, 53.11 -67.2, 59 -81.83 C64.89 -96.45, 84.3 -100.87, 90.63 -87.42 C96.96 -73.98, 96.24 -1.69, 96.98 -1.15 C97.72 -0.62, 90.59 -70.87, 95.09 -84.23 C99.58 -97.59, 117.95 -95.23, 123.96 -81.34 C129.96 -67.45, 127.91 -17.45, 131.13 -0.9 C134.35 15.66, 138.74 17.62, 143.29 17.98 C147.84 18.34, 155.92 4.06, 158.45 0."
  ),
};
const N = {
  width: 124.11,
  curve: parseCurve(
    "C3.23 -2.83, 15.46 -4.91, 19.38 -16.98 C23.3 -29.05, 18.26 -61.12, 23.51 -72.4 C28.76 -83.68, 45.59 -96.78, 50.89 -84.66 C56.19 -72.53, 53.95 -0.15, 55.3 0.32 C56.65 0.79, 53.08 -69.31, 59 -81.83 C64.91 -94.35, 84.46 -88.25, 90.79 -74.81 C97.12 -61.36, 93.62 -15.58, 96.98 -1.15 C100.34 13.28, 106.4 11.58, 110.92 11.77 C115.44 11.96, 121.91 1.97, 124.11 0."
  ),
};
const O = {
  width: 109.56,
  curve: parseCurve(
    "C5.16 -3.01, 27.85 -20.73, 30.95 -18.03 C34.04 -15.34, 14.8 6.46, 18.57 16.19 C22.34 25.92, 41.88 43.26, 53.57 40.34 C65.26 37.42, 87.29 12.8, 88.68 -1.33 C90.07 -15.46, 72.36 -42.05, 61.91 -44.44 C51.46 -46.83, 24.36 -26.09, 26 -15.7 C27.64 -5.3, 57.8 15.68, 71.73 17.93 C85.65 20.18, 103.25 1.15, 109.56 0."
  ),
};
const P = {
  width: 118.44,
  curve: parseCurve(
    "C4.93 -7.43, 24.08 -44.28, 29.58 -44.56 C35.08 -44.84, 31.67 -35.31, 33.01 -1.67 C34.34 31.97, 37.48 157.73, 37.58 157.29 C37.67 156.86, 32.72 31.83, 33.56 -4.28 C34.4 -40.39, 31.48 -51.39, 42.62 -59.35 C53.77 -67.31, 91.48 -63.02, 100.45 -52.03 C109.42 -41.05, 101 -4.72, 96.46 6.56 C91.92 17.83, 83.17 17.78, 73.22 15.6 C63.26 13.41, 34.23 -6.58, 36.7 -6.58 C39.17 -6.58, 74.41 14.93, 88.03 15.58 C101.66 16.24, 113.37 0.41, 118.44 0."
  ),
};
const Q = {
  width: 123.52,
  curve: parseCurve(
    "C11.74 -4.79, 60.15 -17.95, 70.43 -28.75 C80.71 -39.55, 71.26 -60.28, 61.68 -64.8 C52.1 -69.32, 18.43 -68.5, 12.95 -55.89 C7.46 -43.29, 17.97 1.03, 28.79 10.82 C39.61 20.61, 70.36 12.45, 77.89 2.84 C85.42 -6.77, 73.62 -72.72, 73.96 -46.83 C74.29 -20.94, 79.11 144.25, 79.88 158.17 C80.65 172.08, 71.28 63.24, 78.56 36.65 C85.83 10.06, 116.03 4.94, 123.52 0."
  ),
};
const R = {
  width: 80.39,
  curve: parseCurve(
    "C2.4 -6.89, 6.2 -33.7, 14.41 -41.35 C22.62 -49, 42.81 -54.35, 49.25 -45.93 C55.68 -37.5, 47.84 1, 53.03 9.22 C58.22 17.44, 75.83 4.36, 80.39 0."
  ),
};
const S = {
  width: 90.05,
  curve: parseCurve(
    "C5.69 -3.99, 24.68 -12.32, 34.12 -23.96 C43.56 -35.61, 50.23 -70.53, 56.64 -69.86 C63.04 -69.19, 68.8 -36.14, 72.55 -19.95 C76.31 -3.76, 85.78 18.48, 79.18 27.29 C72.57 36.09, 36.47 34.7, 32.92 32.87 C29.38 31.05, 48.37 22.24, 57.89 16.33 C67.41 10.42, 84.69 0.57, 90.05 0."
  ),
};
const T = {
  width: 76.14,
  curve: parseCurve(
    "C4.47 -4.19, 21.05 -2.99, 26.82 -25.14 C32.58 -47.28, 32.99 -126.51, 34.59 -132.85 C36.2 -139.19, 29.67 -75.14, 36.45 -63.18 C43.22 -51.22, 75.39 -61.75, 75.25 -61.08 C75.1 -60.41, 42.54 -67.57, 35.57 -59.15 C28.61 -50.74, 30.82 -23.46, 33.45 -10.58 C36.08 2.31, 44.24 16.07, 51.36 18.16 C58.47 20.25, 72.01 4.66, 76.14 0."
  ),
};
const U = {
  width: 82.5,
  curve: parseCurve(
    "C2.84 -2.63, 14 -5.47, 17.03 -15.81 C20.07 -26.15, 17.79 -64.63, 18.22 -62.06 C18.66 -59.48, 13.77 -11.59, 19.63 -0.36 C25.48 10.88, 47.03 15.84, 53.35 5.35 C59.66 -5.15, 56.65 -62.91, 57.54 -63.32 C58.43 -63.72, 56.23 -10.12, 58.7 2.92 C61.16 15.96, 68.37 14.68, 72.34 14.94 C76.31 15.2, 80.8 6.22, 82.5 0."
  ),
};
const V = {
  width: 93.87,
  curve: parseCurve(
    "C2.86 -3.82, 9.71 -32.47, 17.14 -22.9 C24.58 -13.33, 34.88 53.2, 44.61 57.42 C54.34 61.65, 67.29 11.84, 75.5 2.44 C83.71 -6.95, 90.81 1.27, 93.87 0."
  ),
};
const W = {
  width: 132.16,
  curve: parseCurve(
    "C3.71 -2.01, 17.28 -3.23, 22.27 -12.04 C27.26 -20.86, 28.54 -58.7, 29.96 -52.89 C31.38 -47.09, 24.67 8.38, 30.81 22.77 C36.95 37.17, 60.36 45.94, 66.79 33.48 C73.22 21.02, 68.35 -51.91, 69.39 -51.98 C70.42 -52.06, 66.6 18.71, 73.02 33.04 C79.44 47.37, 101.88 48.02, 107.91 34.01 C113.94 19.99, 108.4 -46.98, 109.19 -51.05 C109.98 -55.13, 108.84 0.88, 112.67 9.55 C116.5 18.22, 128.91 2.41, 132.16 0."
  ),
};
const X = {
  width: 145.97,
  curve: parseCurve(
    "C3.96 -3.55, 15.39 -11.1, 23.74 -21.31 C32.08 -31.53, 42.56 -61.52, 50.05 -61.29 C57.55 -61.07, 63.83 -34.71, 68.69 -19.95 C73.54 -5.19, 85.61 18.84, 79.18 27.29 C72.75 35.73, 34.63 33.51, 30.12 30.7 C25.61 27.88, 41.38 23.47, 52.1 10.4 C62.82 -2.67, 82.97 -35.86, 94.44 -47.74 C105.91 -59.62, 122.22 -61.38, 120.92 -60.87 C119.61 -60.37, 93.32 -55.25, 86.61 -44.71 C79.9 -34.16, 77.21 -9.89, 80.65 2.37 C84.09 14.63, 96.38 29.22, 107.27 28.85 C118.16 28.47, 139.52 4.91, 145.97 0."
  ),
};
const Y = {
  width: 110.78,
  curve: parseCurve(
    "C4.95 -3.95, 24.24 -11.84, 29.73 -23.71 C35.21 -35.59, 33.33 -75.88, 32.9 -71.24 C32.48 -66.6, 20.51 -10.88, 27.16 4.12 C33.81 19.11, 64.08 31.07, 72.79 18.73 C81.49 6.38, 78.58 -74.4, 79.38 -69.96 C80.19 -65.52, 78.71 9.07, 77.61 45.38 C76.52 81.7, 78.78 133.77, 72.84 147.94 C66.9 162.11, 45.05 141.48, 41.99 130.4 C38.93 119.33, 43 102.85, 54.46 81.48 C65.93 60.11, 101.39 15.4, 110.78 0."
  ),
};
const Z = {
  width: 128.1,
  curve: parseCurve(
    "C4.31 -3.15, 19.79 -7.69, 25.87 -18.87 C31.94 -30.05, 25.63 -59.64, 36.44 -67.09 C47.26 -74.53, 87.22 -72.7, 90.77 -63.52 C94.32 -54.34, 57.59 -22.83, 57.73 -12.01 C57.86 -1.18, 84.98 -21.97, 91.56 1.43 C98.14 24.84, 102.67 115.55, 97.21 128.43 C91.76 141.31, 53.68 99.71, 58.83 78.71 C63.98 57.72, 116.55 15.17, 128.1 0."
  ),
};
const SPACE = {
  width: 100,
  curve: [],
};
const DASH = {
  width: 120,
  curve: [
    [
      [10, 0],
      [20, 0],
      [120, 0],
    ],
  ],
};

const characters = {
  " ": SPACE,
  _: DASH,
  a: A,
  b: B,
  c: C,
  d: D,
  e: E,
  f: F,
  g: G,
  h: H,
  i: I,
  j: J,
  k: K,
  l: L,
  m: M,
  n: N,
  o: O,
  p: P,
  q: Q,
  r: R,
  s: S,
  t: T,
  u: U,
  v: V,
  w: W,
  x: X,
  y: Y,
  z: Z,
};
*/

// We define some primitive helpers that manipulate these "curves"

function translateCurve(curve, dx, dy) {
  return curve.map((pts) => pts.map(([x, y]) => [x + dx, y + dy]));
}
function scaleCurve(curve, v) {
  return curve.map((pts) => pts.map(([x, y]) => [x * v, y * v]));
}
function scaleYCurve(curve, v) {
  return curve.map((pts) => pts.map(([x, y]) => [x, y * v]));
}
function shakeCurve(rand, curve, v) {
  // this generatively and randomly move the curve points to make each letter unique
  return curve.map((pts, i) =>
    pts.map(([x, y], j) =>
      i === curve.length - 1 && j === 2
        ? [x, y]
        : [x + v * (rand() - 0.5), y + v * (rand() - 0.5)]
    )
  );
}

//~~~ now is the actual generative art piece logic ~~~//

const WIDTH = 210;
const HEIGHT = 297;

function art(S) {
  // RNG
  let t, s;
  let rand = (a = 1) =>
    a *
    ((t = S[3]),
    (S[3] = S[2]),
    (S[2] = S[1]),
    (s = S[1] = S[0]),
    (t ^= t << 11),
    (S[0] ^= t ^ (t >>> 8) ^ (s >>> 19)),
    S[0] / 2 ** 32);

  /*
  const sentence = "espoir";
  let sentenceWidth = 0;
  for (let i = 0; i < sentence.length; i++) {
    let letter = characters[sentence[i]] || SPACE;
    sentenceWidth += letter.width;
  }
  */

  let scale = WIDTH / 1000;
  let curves = [];
  let pad = 40;
  let origin = [60, 30];
  let xamp = WIDTH / 10;
  let ymult = 0.12;
  let y = origin[1];
  let x = origin[0] + y * ymult;

  let vitesse = [
    [
      [0, 0],
      parseCurve(
        "C-9.17 -8.27, -60.48 -34.51, -55.05 -49.64 C-49.62 -64.78, 8.54 -115.4, 32.57 -90.81 C56.6 -66.22, 59.81 104.08, 89.14 97.91 C118.47 91.73, 196.15 -96.99, 208.56 -127.85 C220.98 -158.71, 159.23 -100.53, 163.62 -87.27 C168 -74, 219.61 -51.28, 234.85 -48.26 C250.08 -45.24, 253.2 -84.38, 255.04 -69.14 C256.88 -53.91, 240.4 16.91, 245.89 43.14 C251.39 69.38, 274.05 131, 287.99 88.25 C301.92 45.51, 324.97 -188.42, 329.51 -213.34 C334.05 -238.26, 315.83 -112.68, 315.23 -61.26 C314.62 -9.85, 311.73 82.24, 325.89 95.15 C340.05 108.05, 372.37 32.6, 400.18 16.15 C427.99 -0.3, 484.24 14.67, 492.74 -3.55 C501.25 -21.77, 467.85 -89.79, 451.22 -93.18 C434.58 -96.56, 391.86 -56.4, 392.94 -23.84 C394.02 8.73, 425.92 112.68, 457.7 102.24 C489.47 91.8, 565.53 -57.65, 583.6 -86.48 C601.66 -115.31, 556.48 -91.27, 566.07 -70.72 C575.66 -50.17, 636.04 5.85, 641.12 36.84 C646.2 67.83, 609.37 106.41, 596.55 115.24 C583.72 124.08, 542.83 125.36, 564.17 89.83 C585.5 54.31, 703.37 -69.38, 724.54 -97.91 C745.71 -126.44, 682.1 -107.75, 691.21 -81.36 C700.32 -54.96, 774.26 26.96, 779.21 60.48 C784.16 94, 730.76 118.07, 720.92 119.77 C711.08 121.48, 705.12 93.93, 720.16 70.72 C735.21 47.51, 779.4 -6.17, 811.2 -19.5 C843.01 -32.83, 894.06 9.29, 911.01 -9.26 C927.96 -27.81, 927.07 -113.99, 912.91 -130.8 C898.76 -147.61, 839.11 -143.51, 826.06 -110.12 C813.01 -76.73, 822.57 36.54, 834.63 69.54 C846.7 102.53, 871.52 103.69, 898.44 87.86 C925.36 72.04, 979.86 -6.53, 996.15 -25.41"
      ),
    ],
    /*
    [
      [10, 0],
      parseCurve(
        "C0 0, 0 0, 0 0 M6.04 5.25 C12.07 -1.69, 18.1 -8.63, 21.78 -12.86"
      ),
    ],
    */
  ];

  const count = 15;
  for (let i = 0; i < count; i++) {
    vitesse.forEach(([[dx, dy], curve]) => {
      curve = scaleCurve(curve, 0.1);
      curve = shakeCurve(rand, curve, 2 * i);
      // curve = translateCurve(curve, x, y);
      curve = translateCurve(curve, x + dx, y + dy);
      curves.push([[x, y], curve]);
    });
    y += 28 * Math.pow(1 - i / count, 1);
  }

  let routes = [];

  return { routes, curves };
}

// Finally we make a helper that will bake the SVG.
function makeSVG(a) {
  let layer =
    a.routes
      .map(
        (route) =>
          `<path d="${route
            .map(
              ([x, y], i) =>
                `${i === 0 ? "M" : "L"}${x.toFixed(2)},${y.toFixed(2)}`
            )
            .join(
              " "
            )}" fill="none" stroke="black" stroke-width="0.35" style="mix-blend-mode: multiply;" />`
      )
      .join("\n") +
    a.curves
      .map(
        ([p, params]) =>
          `<path d="M${p[0].toFixed(2)},${p[1].toFixed(2)} ${params
            .map(
              ([h1, h2, p]) =>
                `C${h1[0].toFixed(2)},${h1[1].toFixed(2)} ${h2[0].toFixed(
                  2
                )},${h2[1].toFixed(2)} ${p[0].toFixed(2)},${p[1].toFixed(2)}`
            )
            .join(
              " "
            )}" fill="none" stroke="black" stroke-width="0.35" style="mix-blend-mode: multiply;" />`
      )
      .join("\n");
  return `<svg style="background:white" viewBox="0 0 210 297" width="210mm" height="297mm" xmlns="http://www.w3.org/2000/svg" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape">
<g inkscape:groupmode="layer" inkscape:label="black">${layer}</g>
</svg>`;
}

const a = art(
  Uint32Array.from([0, 0, 0, 0].map(() => (Math.random() * 0xffffffff) | 0))
);
const svg = makeSVG(a);
document.body.innerHTML = svg;

console.log(svg);
