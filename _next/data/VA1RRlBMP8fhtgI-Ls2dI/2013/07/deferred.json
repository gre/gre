{"pageProps":{"id":"2013-07-13-deferred","year":"2013","month":"07","day":"13","slug":"deferred","content":"<h1 id=\"a-world-of-promises-episode-2\">A <a href=\"/pages/a-world-of-promises/\">World Of Promises</a>, episode 2</h1>\n<img src=\"/images/2013/07/qimage_then_thumbnail.jpg\" alt=\"\" class=\"thumbnail-right\" style=\"width: 200px\" />\n\n<p><em>This second article on <a href=\"http://github.com/kriskowal/q\">Q</a> will introduce you how to easily \nturn a callback API into a promise API using Deferred objects.\nIt will also present the new W3C specification of Promise and finish\nwith the implementation of <a href=\"http://github.com/gre/qimage\">Qimage</a>, a simple Image Promise wrapper.</em></p>\n<!--more-->\n\n<h2 id=\"deferred-objects\">Deferred objects</h2>\n<p><a href=\"http://github.com/kriskowal/q\">Q</a> splits the concept of Promise in two parts: one part is the <strong>Deferred object</strong>, another is the <strong>Promise object</strong>.</p>\n<p>A <strong>Deferred object</strong> is an object which just aims to control the state of a Promise.\nIt allows to do one of the two following actions (one time only):</p>\n<ul>\n<li><code>.resolve(value)</code>: moving from <em>pending</em> to <strong><em>fulfilled</em> with a value</strong>.</li>\n<li><code>.reject(error)</code>: moving from <em>pending</em> to <strong><em>rejected</em> with an error</strong>.</li>\n</ul>\n<img src=\"/images/2013/07/promise.png\" style=\"max-width: 300px; width: 100%\" />\n\n<p>A <strong>Promise object</strong> can be obtained from a Deferred object via the <code>promise</code> field.\nIn <a href=\"http://github.com/kriskowal/q\">Q</a>, a Promise is <strong>read-only</strong>: you can basically only do <code>.then</code> with it \nand there is no such <code>resolve</code> or <code>reject</code> method on a Promise.</p>\n<blockquote>\n<p>a Deferred is &quot;resolvable&quot;, a Promise is &quot;thenable&quot;.</p>\n</blockquote>\n<p><em><strong>N.B.</strong></em>: <em>this separation also exists in other languages but with different names (for instance in Scala: Promise / Future).</em></p>\n<h3 id=\"qdefer\"><code>Q.defer()</code></h3>\n<p>The method Q.defer() will return a new <strong>Deferred object</strong> initialized in a <em>pending</em> state.</p>\n<pre><code class=\"language-javascript\">var d = Q.defer();\nsetTimeout(function () {\n  d.resolve(42);\n}, 500);\nvar promise = d.promise;\n// ...\npromise.then(function (value) {\n  console.log(&quot;the universe = &quot;+value);\n});\n</code></pre>\n<p>Note that the <a href=\"http://wiki.commonjs.org/wiki/Promises/A\">Promises/A</a> spec only specifies the concept of <strong>Promise</strong>.\nIt does not defines the &quot;Deferred&quot; part.\nUp to the Promise library to implement its own way of resolving / rejecting the value of a Promise.</p>\n<p>There is also <a href=\"http://wiki.commonjs.org/wiki/Promises/B\">Promises/B</a> and <a href=\"http://wiki.commonjs.org/wiki/Promises/D\">Promises/D</a> to define that though.</p>\n<h3 id=\"about-the-dompromise-specification\">About the DOM.Promise specification</h3>\n<p>a <a href=\"http://dom.spec.whatwg.org/#promises\">new DOM specification draft</a> has born recently and is a bit different from the Q style,\nthe &quot;Deferred&quot; object (called a <strong>Resolver</strong>) is given as an argument of the function given at Promise instanciation.</p>\n<pre><code class=\"language-javascript\">var promise = new /*DOM.*/Promise(function (resolver) {\n  setTimeout(function () {\n    resolver.resolve(42);\n  }, 500);\n});\npromise.then(function (value) {\n  console.log(&quot;the universe = &quot;+value);\n});\n</code></pre>\n<h2 id=\"qimage-wrapping-the-image-api\">Qimage: Wrapping the Image API</h2>\n<p>We will now show you how to easily <strong>wrap the DOM Image API into a Promise API with Q</strong>.\nBefore showing the implementation, let&#39;s explore the possibilities of such API.</p>\n<p><strong><code>Qimage (url: String) =&gt; Promise[DOM Image]</code></strong></p>\n<p>Here is how we want our <code>Qimage</code> API to look like:</p>\n<pre><code class=\"language-javascript\">var promise = Qimage(&quot;http://imagesource.com/image.png&quot;);\npromise.then(function (image) {\n  // image instanceof Image\n}, function (error) {\n  // error instanceof Error\n});\n</code></pre>\n<p>We can use it like this:</p>\n<pre><code class=\"language-javascript\">Qimage(&quot;images/foo.png&quot;).then(function (img) {\n  document.body.appendChild(img);\n}, function (error) {\n  document.body.innerHTML = &quot;Unable to load the image&quot;;\n});\n</code></pre>\n<p>Now we define <code>Qimage</code> as a Promise library, <strong>we can then use all the power of Promises,\ncombine Promises together, chain different Promise APIs</strong>...</p>\n<pre><code class=\"language-javascript\">Q.all([\n  Qimage(&quot;res1.png&quot;),\n  Qimage(&quot;res2.png&quot;),\n  Qimage(&quot;res3.png&quot;)\n])\n.spread(function (res1, res2, res3) {\n  document.body.appendChild(res1);\n  document.body.appendChild(res2);\n  document.body.appendChild(res3);\n});\n</code></pre>\n<p>This wrapper makes a simple but powerful Image Loading library module.</p>\n<h3 id=\"implementation\">Implementation</h3>\n<p>Here is how <code>Qimage</code> works:</p>\n<pre><code class=\"language-javascript\">var Qimage = function (url) {\n  var d = Q.defer();\n  var img = new Image();\n  img.onload = function () {\n    d.resolve(img);\n  };\n  img.onabort = function (e) {\n    d.reject(e);\n  };\n  img.onerror = function (err) {\n    d.reject(err);\n  };\n  img.src = url;\n  return d.promise;\n};\n</code></pre>\n<p>...and that&#39;s it!</p>\n<p>Note that <strong>the Deferred object is isolated</strong> in the <code>Qimage</code> function scope.</p>\n<p>Only the (read-only) Promise is accessible from the outside when returned by the function.</p>\n<p><strong>How simple is wrapping a callback API into a Promise API!</strong></p>\n<hr>\n<p><a href=\"http://github.com/gre/qimage\">Qimage</a> is released as a micro-lib and available on <a href=\"http://github.com/gre/qimage\">Github</a> and <a href=\"https://npmjs.org/package/qimage\">NPM</a>.</p>\n<h2 id=\"next-episode\">Next episode</h2>\n<p>Next episode will feature <strong><code>requestAnimationFrame</code></strong>, \n<em>a fundamental function generally used for performing efficient Javascript animations</em>.\nWe will show you <strong>QanimationFrame</strong> and how we can use it as a <strong>Promisified &quot;wait for DOM to be ready&quot; API</strong>.</p>\n","data":{"title":"Qep2.: Deferred objects, Qimage","description":"This second article on Q will introduce you how to easily turn a callback API into a promise API using Deferred objects. It will also present the new W3C specification of Promise and finish with the implementation of Qimage, a simple Image Promise wrapper.","thumbnail":"/images/2013/07/qimage_then_thumbnail.jpg","author":"Gaetan","layout":"post","tags":["AWOP","javascript","promise","Q","library"]}},"__N_SSG":true}