{"pageProps":{"id":"2010-03-14-sass-levolution-du-css","year":"2010","month":"03","day":"14","slug":"sass-levolution-du-css","content":"<p><strong>SASS, Syntactically Awesome Stylesheets</strong>, est un langage de feuille de style évolué qui permet de factoriser beaucoup de code css et de rendre son écriture et sa maintenance <strong>rapide et moins contraignante</strong>. Il est compilé en css.</p>\n<!--more-->\n\n<h2 id=\"pourquoi-utiliser-sass-\">Pourquoi utiliser SASS ?</h2>\n<p>Son utilisation a de nombreux avantages par rapport au CSS :</p>\n<ul>\n<li>sa <strong>simplicité</strong> (pas de crochets, pas de point virgule mais juste de l’indentation)</li>\n<li>l’<strong>imbrication</strong> des sélecteurs css (appliquant l’idée DRY : don’t repeat yourself)</li>\n<li>l’utilisation de <strong>variables</strong></li>\n<li>l’utilisation d’<strong>opérations élémentaires</strong> (sur les pixels, les couleurs, …)</li>\n<li>la <strong>factorisation</strong> du code (au lieu de faire des copier-coller, on peux factoriser le code à travers les “mixins”).</li>\n<li>La <strong>réduction</strong> css et la <strong>clarté</strong> du code</li>\n<li>La <strong>compression du code</strong> compilé avec la possibilité de tout mettre dans un fichier (via l’héritage) et de minimifier le code css.</li>\n</ul>\n<p>Ce langage n’est pas difficile à apprendre, cela ressemble au css, avec de nombreuses fonctionnalités intéressantes en plus.</p>\n<h2 id=\"la-syntaxe-du-langage\">La syntaxe du langage</h2>\n<p>La syntaxe du sass est <strong>compatible avec celle du css à quelques exceptions près</strong> :</p>\n<ul>\n<li>Ne plus mettre de point virgule <strong>;</strong></li>\n<li>Ne plus mettre de crochets <strong>{ }</strong></li>\n<li>Respecter les conventions traditionnelles (<strong>attribut: valeur</strong> un espace après le deux points mais pas avant)</li>\n<li>Respecter l’indentation : Il faut choisir une indentation et s’y tenir dans un même fichier. Au choix : une tabulation, 2 espaces, 4 espaces, … Les lignes <em>propriétés: valeurs</em> d’un sélecteur css doivent dépasser d’une indentation ce sélecteur.</li>\n</ul>\n<p>En respectant ces points, vous pouvez déjà <strong>coder en SASS comme en CSS</strong>.</p>\n<p>Mais cela ne serait pas intéressant sans les nouveautés suivantes :</p>\n<h3 id=\"la-factorisation-des-sélecteurs-en-plusieurs-niveaux\">La factorisation des sélecteurs en plusieurs niveaux</h3>\n<p>Au lieu d’avoir ce type d’arborescence à un niveau :</p>\n<pre><code class=\"language-sass\">.main .head\n  color: red\n.main .body\n  color: blue\n</code></pre>\n<p>Nous pouvons factoriser le sélecteur “_.main_” et se ramener à deux niveaux :</p>\n<pre><code class=\"language-sass\">.main\n  .head\n    color: red\n  .body\n    color: blue\n</code></pre>\n<p>Ce procédé de factorisation basé sur l’esprit <strong>DRY</strong> (Don’t Repeat Yourself) est aussi applicable sur les attributs eux-mêmes :</p>\n<pre><code class=\"language-sass\">a\n  font:\n    family: serif\n    weight: bold\n    size: 1.2em\n</code></pre>\n<p>sera compilé en css par :</p>\n<pre><code class=\"language-css\">a {\n  font-family: serif;\n  font-weight: bold;\n  font-size: 1.2em;\n}\n</code></pre>\n<h3 id=\"les-variables\">Les variables</h3>\n<p>La possibilité d’utiliser des variables est un gros apport au css. Elle permet <strong>une meilleure maintenance du code et une meilleure scalabilité d’une application</strong> (en utilisant par exemple des fichiers sass de thèmes définissant toutes les couleurs, images, polices, …).<br>Il existe plusieurs <strong>types de variables</strong> (nombre réel, pixels, couleurs, chaines de caractères …) et il est possible d’utiliser des <strong>opérations élémentaires</strong>.</p>\n<p>Lorsqu’on écrit une ligne <strong>attribut / value</strong> avec l’utilisation de variables (dynamique),<br>on utilise le caractère ‘**=<strong>‘ au lieu de ‘</strong>:**‘ pour l’affectation.</p>\n<h4 id=\"les-couleurs\">Les couleurs</h4>\n<pre><code class=\"language-sass\">!link_color = red\na\n  color = !link_color\n  &amp;:hover\n    color = !link_color #222\n</code></pre>\n<p>A noter que le symbole <strong>&amp;</strong> remplace le sélecteur parent.</p>\n<p>Ce qui donne le code compilé suivant :</p>\n<pre><code class=\"language-css\">a {\n  color: red;\n}\na:hover {\n  color: #ff2222;\n}\n</code></pre>\n<h4 id=\"les-pixels\">Les pixels</h4>\n<pre><code class=\"language-sass\">!margin = 16px\n.border\n  padding = !margin / 2\n  margin = !margin / 2\n</code></pre>\n<p>donne le code compilé :</p>\n<pre><code class=\"language-css\">.border {\n  padding: 8px;\n  margin: 8px;\n}\n</code></pre>\n<h3 id=\"les-mixins\">Les “mixins”</h3>\n<p>Les mixins sont des procédures qui contiennent plusieurs lignes de sass.<br>Il est possible d’utiliser des arguments sur ces mixins.</p>\n<pre><code class=\"language-sass\">=border-radius(!radius = 5px)\n  border-radius= !radius\n  -moz-border-radius= !radius\n  -webkit-border-radius= !radius\n</code></pre>\n<pre><code class=\"language-sass\">#wrapper\n   border-radius(10px)\n  &gt; footer\n     border-radius()\n</code></pre>\n<p>Cet exemple est typiquement intéressant car il permet d’utiliser <strong>border-radius</strong> de façon <strong>cross-browser</strong> et avec une ligne de code.</p>\n<p>A noter qu’il est possible d’affecter des valeurs par défaut aux mixins.</p>\n<p>Le résultat css compilé est le suivant :</p>\n<pre><code class=\"language-css\">#wrapper {\n  border-radius: 10px;\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n}\n#wrapper &gt; footer {\n  border-radius: 5px;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n}\n</code></pre>\n<h3 id=\"exemple-complet\">Exemple complet</h3>\n<p>Voici un exemple complet de l’utilisation du SASS</p>\n<pre><code class=\"language-sass\">/* This is just an example */\n\n/* variables */\n!main_width = 900px\n!aside_width = 300px\n!section_width = 520px\n\n!link_color = red\n\n!font_title = &quot;Liberation&quot;,&quot;Georgia&quot;,&quot;serif&quot;\n\n/* mixins */\n=border-radius(!radius = 5px)\n  border-radius= !radius\n  -moz-border-radius= !radius\n  -webkit-border-radius= !radius\n\n=block()\n  display: block\n  overflow: auto\n\n/* colors */\na\n  color = !link_color\n  &amp;:hover\n    color = !link_color #222\n\n\n/* layout */\n\n#wrapper\n  margin:  auto\n  position: relative\n  width = !main_width\n   border-radius(10px)\n  &gt;nav\n     block()\n    padding: 2px\n      top: 5px\n    font-size: 1.2em\n    font-family = !font_title\n    a\n      font-weight: bold\n      &amp;:hover\n        color: white\n\n  &gt;header\n     block()\n    clear: both\n    height: 48px\n    font-family = !font_title\n\n  &gt;footer\n     block()\n    padding: 5px\n    text-align: center\n    clear: both\n\n  #main\n    position: relative\n    &gt;section\n       block()\n      width = !section_width\n      padding: 20px\n\n    &gt;aside\n       block()\n      float: right\n      width = !aside_width\n      padding: 20px\n</code></pre>\n<p>et le résultat du fichier CSS compilé</p>\n<pre><code class=\"language-css\">/* This is just an example */\n/* variables */\n/* mixins */\n/* colors */\na {\n  color: red;\n}\n  a:hover {\n    color: #ff2222;\n}\n\n/* layout */\n#wrapper {\n  margin:  auto;\n  position: relative;\n  width: 900px;\n  border-radius: 10px;\n  -moz-border-radius: 10px;\n  -webkit-border-radius: 10px;\n}\n  #wrapper &gt;nav {\n    display: block;\n    overflow: auto;\n    padding: 2px;\n    padding-top: 5px;\n    font-size: 1.2em;\n    font-family: Liberation, Georgia, serif;\n}\n    #wrapper &gt;nav a {\n      font-weight: bold;\n}\n      #wrapper &gt;nav a:hover {\n        color: white;\n}\n  #wrapper &gt;header {\n    display: block;\n    overflow: auto;\n    clear: both;\n    height: 48px;\n    font-family: Liberation, Georgia, serif;\n}\n  #wrapper &gt;footer {\n    display: block;\n    overflow: auto;\n    padding: 5px;\n    text-align: center;\n    clear: both;\n}\n  #wrapper #main {\n    position: relative;\n}\n    #wrapper #main &gt;section {\n      display: block;\n      overflow: auto;\n      width: 520px;\n      padding: 20px;\n}\n    #wrapper #main &gt;aside {\n      display: block;\n      overflow: auto;\n      float: right;\n      width: 300px;\n      padding: 20px;\n}\n</code></pre>\n<p>Le SASS offre <strong>encore plus de possibilités</strong>, notamment l’interpolation, les conditions, les boucles, …<br>Vous trouverez plus d’informations sur la <em>documentation SASS</em>.</p>\n<h2 id=\"utilisation\">Utilisation</h2>\n<h3 id=\"pré-requis\">Pré-requis</h3>\n<p><strong>Note</strong>: Ce qui suit ne s’applique pas pour le plugin sass du framework Play! .</p>\n<p>Pour utiliser SASS, sous linux, installez les packets <strong>ruby</strong> et <strong>rubygems</strong> puis installez <strong>haml</strong> avec la commande :</p>\n<pre><code class=\"language-bash\">gem install haml\n</code></pre>\n<h3 id=\"avec-le-framework-java-play\">Avec le framework java Play!</h3>\n<p>Grâce au module sass de play framework, le SASS est <strong>compilé à la volée</strong> au moment du chargement d’une page (en mode développement) ou au chargement de l’application (en mode production).</p>\n<h4 id=\"installation\">Installation</h4>\n<p>Depuis play 1.1, il suffit de lancer la commande</p>\n<pre><code class=\"language-bash\">play install sass\n</code></pre>\n<p>Ensuite il faut activer le module dans la configuration de l’application (fichier <em>conf/application.conf</em>).</p>\n<h3 id=\"avec-le-framework-ruby-on-rails\">Avec le framework Ruby on Rails</h3>\n<h4 id=\"installation-1\">Installation</h4>\n<p>Pour activer le plugin SASS sur une application Rails, lancez :</p>\n<pre><code class=\"language-bash\">haml --rails path/to/rails/app\n</code></pre>\n<h3 id=\"autrement\">Autrement</h3>\n<p>Vous pouvez toujours utiliser SASS en compilant vos fichier sass en css à chaque modification (voir <em>Commandes pratiques</em>).<br>Vous inclurez ensuite le fichier css compilé dans votre html.</p>\n<h2 id=\"convertir-ses-anciens-css-en-sass\">Convertir ses anciens CSS en SASS</h2>\n<p>Si vous ne voulez pas repartir de zéro dans le design d’un projet, vous pouvez tout à fait repartir avec les anciens CSS en les exportant en SASS.</p>\n<h2 id=\"commandes-pratiques\">Commandes pratiques</h2>\n<ul>\n<li><p>Pour convertir vos fichier CSS en SASS il vous suffit d’utiliser : <code>css2sass</code></p>\n</li>\n<li><p>Pour compiler vos fichier SASS en CSS, utilisez: <code>sass</code></p>\n</li>\n</ul>\n<h2 id=\"liens\">Liens</h2>\n<ul>\n<li><a href=\"http://sass-lang.com/\">Site du langage SASS</a></li>\n<li><a href=\"http://www.playframework.org/\">Site du framework Play!</a></li>\n</ul>\n<h3 id=\"aller-plus-loin\">Aller plus loin</h3>\n<ul>\n<li><a href=\"http://compass-style.org/\">Compass : framework SASS</a></li>\n<li><a href=\"http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html\">Documentation SASS</a></li>\n</ul>\n","data":{"title":"SASS : l'évolution du CSS pour Play, Rails ou autres","author":"Gaetan","layout":"post","permalink":"/2010/03/sass-levolution-du-css/","tags":["css","sass"]}},"__N_SSG":true}