{"pageProps":{"id":"2022-02-14-gnsp-nanoscreen","year":"2022","month":"02","day":"14","slug":"gnsp-nanoscreen","content":"<p>This third article (in a series of 7 articles) reveals the technique used to render the screen display itself.</p>\n<p><video muted loop autoplay controls src=\"/images/2021/12/gnsp/419.mp4\" width=\"50%\" style=\"float:left; margin-right: 40px; margin-bottom:20px\"></video></p>\n<p><strong>Timeline:</strong></p>\n<ul>\n<li><a href=\"/2021/12/gnsp\">article 1: GNSP – the concept</a></li>\n<li><a href=\"/2021/12/gnsp-raymarching\">article 2: the 3D distance to a Nano S+</a></li>\n<li><a href=\"/2022/02/nanoscreen\"><strong>article 3: the nano screen</strong></a></li>\n<li>article 4: the swivel</li>\n<li>article 5: the background</li>\n<li>article 6: the video generation</li>\n<li>article 7: the final drop</li>\n<li>(Mid-January) public mint</li>\n</ul>\n<p><strong>The collection is browsable on <a href=\"https://greweb.me/gnsp\">https://greweb.me/gnsp</a></strong></p>\n<p><strong>OpenSea: <a href=\"https://opensea.io/collection/gnsp\">https://opensea.io/collection/gnsp</a></strong></p>\n<br style=\"clear:left\"/>\n\n<p>The screen, displays the unique BIP39 word and can sometimes have an effect or an animation. In the NFT metadata, they are expressed on the &quot;Screen&quot; feature, and here is the distribution:</p>\n<pre><code>                 &lt;not defined&gt;: 1527 = 74.6%\n                     scrolling: 251 = 12.3%\n                      blinking: 136 = 6.6%\n                      negative: 81 = 4.0%\n                       complex: 25 = 1.2%\n        negative and scrolling: 11 = 0.5%\n                 half-negative: 8 = 0.4%\n         negative and blinking: 7 = 0.3%\n    half-negative and blinking: 2 = 0.1%\n</code></pre>\n<p>This means 75% of the time you will only get the text displayed statically but in other case you have various effects implemented.</p>\n<h2 id=\"step-1-a-canvas2d-texture-is-used-for-the-word-text\">Step 1: a Canvas2D texture is used for the word text</h2>\n<p>a 128 by 64 Canvas 2D texture is generated – this is the actual resolution in pixels on the actual device.</p>\n<pre><code class=\"language-js\">function screen(word) {\n  const w = 128; const h = 64;\n  const canvas = document.createElement(&quot;canvas&quot;);\n  canvas.width = w; canvas.height = h;\n  const ctx = canvas.getContext(&quot;2d&quot;);\n  ctx.fillStyle = &quot;#fff&quot;;\n  ctx.fillRect(0, 0, w, h);\n  ctx.textAlign = &quot;center&quot;;\n  ctx.textBaseline = &quot;middle&quot;;\n  ctx.font =\n    (navigator.userAgent.includes(&quot;Mac OS&quot;)\n      ? &quot;&quot; : &quot;bold &quot;) + &quot;22px Arial&quot;;\n  ctx.fillStyle = &quot;#000&quot;;\n  ctx.fillText(word, w / 2, h / 2);\n  return canvas;\n}\n</code></pre>\n<blockquote>\n<p>Ok, there is a funny trick here on an annoying fact: depending on your OS you will have a different font weight, as Mac devices tend to have bolder font, I only used non bold in other cases. </p>\n</blockquote>\n<!--\nI will explain in Article 6 why I actually needed to support different OSs during the video generation phase. I have also externalized the `document.createElement(\"canvas\")` and `ctx.fillText` implementations into a function in order to be able to run this in Node.js (against node-canvas library).\n-->\n\n<p>Apart this trick, there are nothing fancy here: we are just writing the word in the Canvas. So there are actually no animation logic at all here: the animations (text motion / balls motion in negative) are all implemented in the GLSL shader.</p>\n<h2 id=\"step-2-the-text-texture-is-processed-in-glsl\">Step 2: the text texture is processed in GLSL</h2>\n<p>I&#39;m using <code>regl</code> library helper and I need to inject the text canvas as a <code>uniform sampler2D text</code> parameter:</p>\n<pre><code class=\"language-js\">uniforms: {\n  text: regl.texture({ data: screenCanvas, flipY: true }),\n</code></pre>\n<p>After this, the main trick is to project the 2D Texture of the word onto the 3D raymarched object, and in my case, I simply project it along the Z-axis, globally. Indeed it would need to be applied &quot;locally&quot; if the Nano was actually moving or rotating but I didn&#39;t need that so we can simply stick to a global mapping.</p>\n<p>So basically:</p>\n<pre><code class=\"language-glsl\">vec2 coord = someOffset + someMultiplier * p.xy;\nfloat m = step(texture2D(text, coord).x, 0.5);\n</code></pre>\n<p>makes <code>m</code> being a value of either 0.0 or 1.0 based on if the pixel is on or off.</p>\n<p>Now, it also need to be pixelated, so we need to round the coordinate:</p>\n<pre><code class=\"language-glsl\">vec2 coord = someOffset + someMultiplier * p.xy;\nvec2 a = coord * vec2(128.,64.);\ncoord = floor(a) / vec2(128.,64.);\nfloat m = step(texture2D(text, coord).x, 0.5);\n</code></pre>\n<p>Then we add a <code>edge</code> effect. This <code>edge</code> represents the distance to the edge of a pixel.</p>\n<pre><code class=\"language-glsl\">vec2 coord = someOffset + someMultiplier * p.xy;\nvec2 a = coord * vec2(128.,64.);\nfloat edge = min(fract(a.x), fract(a.y));\ncoord = floor(a) / vec2(128.,64.);\nfloat m = step(texture2D(text, coord).x, 0.5)\n  * (1.0 - 0.5 * step(edge, 0.25)); // changes the pixel color\n</code></pre>\n<p>This will accentuate even more the pixel effect as we can see in this zoom:</p>\n<img src=\"/images/2022/gnsp/pixel.png\" width=\"100%\"/>\n\n<p>Ok, to precise exactly what <code>coord</code> is, here is the actual code:</p>\n<pre><code class=\"language-glsl\">vec2 coord = fract(fract(vec2(-0.2, 0.5) + vec2(3.6) * p.xy / vec2(-2.25, 1.0)) + ${\n  opts.scrollingScreen ? &quot;vec2(0.5+floor(time*15.0)/15.0, 0.)&quot; : &quot;0.0&quot;\n});\n</code></pre>\n<p>You can note that:</p>\n<ul>\n<li>multiply by <code>vec2(-2.25, 1.0)</code> to stretch a bit the font.</li>\n<li>in case of <code>scrollingScreen</code> an offset by <code>time</code> is applied on x coordinate, and using some floor function so it does it by &quot;increments&quot; (pixel scroll)</li>\n<li>we apply a whole <code>fract</code> function (which is a <code>% 1.0</code>) to keep the coord in a 0.0 - 1.0 range and actually make it repeat.</li>\n</ul>\n<p>Now, to create the negative effect, what we simply need to do is to either chose <code>m</code> or <code>1.0 - m</code> as a pixel value. </p>\n<p>This is implementing the simple idea to have half of the screen cut into two negative parts:</p>\n<pre><code class=\"language-glsl\">${opts.halfnegativeScreen ? &quot;m=mix(m,1.-m,step(coord.y, 0.5));&quot; : &quot;&quot;}\n</code></pre>\n<p>And this implements the possibly blinking effect:</p>\n<pre><code class=\"language-glsl\">${opts.blinkingScreen ? &quot;m*=step(fract(2.*time),0.5);&quot; : &quot;&quot;}\n</code></pre>\n<p>Now for the more complex animation, the effect varies at a given position on x,y, so we will give it to a function to determine if we need to swap the color. The animation we can see in the video above is a reference to one of my last year creation: <a href=\"/shaderday/65\">/shaderday/65</a>.</p>\n<pre><code class=\"language-glsl\">${\n  !opts.screenAnimation\n    ? &quot;&quot;\n    : `\n      float sz = ${(\n        1 -\n        opts.screenAnimation[3] * opts.screenAnimation[3]\n      ).toFixed(2)};\n      coord -= 0.5;\n      coord *= vec2(2.,1.) * ${(\n        1 -\n        opts.screenAnimation[3] * opts.screenAnimation[3]\n      ).toFixed(2)};\n      coord += 0.5;\n      ${\n        opts.screenAnimation[1] &lt; 0.2\n          ? `coord.y${opts.screenAnimation[1] &lt; 0.1 ? &quot;+&quot; : &quot;-&quot;}=time;`\n          : &quot;&quot;\n      }\n      ${opts.screenAnimation[2] &lt; 0.2 ? `coord.x-=time;` : &quot;&quot;}\n      coord=fract(coord);\n      m=mix(m,1.-m,step(shape(coord,2.*PI*time), 0.5));\n    `\n}\n</code></pre>\n<p><code>screenAnimation</code> is a array of random values and with that, we can yield variation of the initial <code>shape</code> animation which is implemented relatively like in my <a href=\"/shaderday/65\">/shaderday/65</a>:</p>\n<pre><code class=\"language-glsl\">float shape (vec2 p, float t) {\n  float smoothing = 0.15;\n  p -= 0.5;\n  vec2 q = p;\n  pR(p, t + cos(${Math.round(5 * opts.screenAnimation[0] - 2)}. * t));\n  vec2 dist = vec2(0.0);\n  float crop = 99.0;\n  float s = 99.0;;\n  s = fOpUnionRound(q.y, s, smoothing);\ndist = vec2(0.31, 0.0);\nfloat radius = 0.11;\ns = fOpUnionRound(s, length(p + dist) - radius, smoothing);\ncrop = fOpUnionRound(crop, length(p - dist) - radius, smoothing);\n  s = fOpDifferenceRound(s, crop, smoothing);\n  return smoothstep(0.0, 1.0 / min(resolution.x, resolution.y), s);\n}\n</code></pre>\n<p>Finally, we map the &quot;m&quot; value to actual colors, and in our case it&#39;s basically black and white. Note the usage of <code>negativeScreen</code> flag:</p>\n<pre><code class=\"language-glsl\">mix(\n  vec3(0.01),\n  vec3(1.0),\n  ${opts.negativeScreen ? &quot;1.-&quot; : &quot;&quot;}m\n)\n</code></pre>\n<blockquote>\n<p>This GLSL code is templated in JavaScript as you may notice, it&#39;s a trick to make the GLSL compile even faster to avoid having runtime ifs.</p>\n</blockquote>\n<p><strong>That&#39;s it folks! There are nothing more to say about the screen rendering of GNSP.</strong></p>\n<!--\n// TODO explain multi platform in VIDEO article\n\n```js\nuniforms: { text: regl.texture(createImageTexture(screenCanvas))\n```\n\nwhere `createImageTexture` in context of web is:\n\n```js\nlet createImageTexture = canvas => ({ data: canvas, flipY: true })\n```\n\nbut for instance, in context of Node.js implementation is:\n\n```js\nlet createImageTexture = (canvas) => {\n  const ctx = canvas.getContext(\"2d\");\n  const width = canvas.width;\n  const height = canvas.height;\n  const imageData = ctx.getImageData(0, 0, width, height);\n  return { data: imageData.data, width, height };\n};\n```\n--->","data":{"title":"GNSP – the Nano screen rendering","thumbnail":"/images/2022/gnsp/screen-thumbnail.png","description":"This third article reveals the technique used to render the screen display itself.","tags":["NFT"]}},"__N_SSG":true}