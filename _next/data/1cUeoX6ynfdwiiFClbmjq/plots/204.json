{"pageProps":{"n":"204","plot":{"n":"204","key":"./204/README.md","rustFile":"204/main.rs","sourceURL":"https://github.com/gre/gre/blob/master/plots/examples/204/main.rs","content":"<p>A variant of <a href=\"/plots/203\">plot#203</a>.</p>\n<blockquote>\n<p>I like randomness a lot. Exploring the beauty of noise is also recreating Nature&#39;s pattern and trying to put back some order in that randomness.</p>\n</blockquote>\n","data":{"date":"2021-07-23","title":"Bloody circles & ordered noise","image":"/images/plots/204.jpg","description":"I like randomness a lot. Exploring the beauty of noise is also recreating Nature's pattern and trying to put back some order in that randomness.","tags":["shape-packing"]}},"prev":{"n":"203","key":"./203/README.md","rustFile":"203/main.rs","sourceURL":"https://github.com/gre/gre/blob/master/plots/examples/203/main.rs","content":"<p>As you may notice, I like randomness a lot. Exploring the beauty of noise is also recreating Nature&#39;s pattern and trying to put back some order in that randomness.</p>\n<p>This creation is an unusual version of &quot;circle packing&quot; that instead of a pure random distribution will run a few times to actually try to find the biggest circle to place. This makes the distribution less random and way more ordered. However, the fact there is a &quot;a few times&quot; maximum tries gives some room for some randomness and not &quot;pure order&quot;.</p>\n<p>The algorithm at stake is relatively simple, I will have to improve it in future to parallelize the computation.</p>\n<pre><code class=\"language-rust\">fn packing(\n    seed: f64,\n    iterations: usize,\n    desired_count: usize,\n    optimize_size: usize, // &lt;--- number of retries to optimize the size\n    pad: f64,\n    container: &amp;VCircle,\n    min_scale: f64,\n    max_scale: f64,\n) -&gt; Vec&lt;VCircle&gt; {\n    let mut circles = Vec::new();\n    let mut tries = Vec::new();\n    let mut rng = rng_from_seed(seed);\n    let x1 = container.x - container.r;\n    let y1 = container.y - container.r;\n    let x2 = container.x + container.r;\n    let y2 = container.y + container.r;\n    let max_scale = max_scale.min(container.r);\n    for _i in 0..iterations {\n        let x: f64 = rng.gen_range(x1, x2);\n        let y: f64 = rng.gen_range(y1, y2);\n        if let Some(size) = search_circle_radius(&amp;container, &amp;circles, x, y, min_scale, max_scale) {\n            let circle = VCircle::new(x, y, size - pad);\n            // innovation happens here, basically we keep pushing until we reach the nb\n            tries.push(circle);\n            if tries.len() &gt; optimize_size {\n                // then we grab the biggest\n                tries.sort_by(|a, b| b.r.partial_cmp(&amp;a.r).unwrap());\n                let c = tries[0];\n                circles.push(c.clone());\n                tries = Vec::new();\n            }\n        }\n        if circles.len() &gt; desired_count {\n            break;\n        }\n    }\n    circles\n}\n</code></pre>\n","data":{"date":"2021-07-22","title":"circles recursion & ordered noise","image":"/images/plots/203.jpg","description":"I like randomness a lot. Exploring the beauty of noise is also recreating Nature's pattern and trying to put back some order in that randomness.","tags":["shape-packing"]}},"next":{"n":"205","key":"./205/README.md","rustFile":"205/main.rs","sourceURL":"https://github.com/gre/gre/blob/master/plots/examples/205/main.rs","content":"<p>The best part of generative art is accumulating techniques and improving your creative coding skills. You explore your imagination and can combine different ideas and techniques over time once you have &quot;absorbed&quot; them in our playbook. IF you know N techniques, one more technique is now giving you <code>N*(N+1)</code> possibilities of outcomes. They can all be crossed over and combined together to produce results. It&#39;s exponential.</p>\n<p><strong>Here is the combination of shape packing, applied to triangle polygon, filled with one of my oldest &quot;fill&quot; algorithm that works by rotating around randomly sampled points.</strong></p>\n","data":{"date":"2021-07-23","title":"triangle noise spiral","image":"/images/plots/205.jpg","description":"combination of shape packing, applied to polygon, filled with one of my oldest fill algorithm that works by rotating around randomly sampled points","tags":["shape-packing"]}}},"__N_SSG":true}