{"pageProps":{"id":"2013-01-10-be-careful-with-js-numbers","year":"2013","month":"01","day":"10","slug":"be-careful-with-js-numbers","content":"<blockquote class=\"twitter-tweet\" lang=\"fr\"><p>@<a href=\"https://twitter.com/greweb\">greweb</a> : Let's do a kickstarter to build the 1st space rocket running on embedded Javascript... I think we can discover new physics rules!</p>&mdash; mandubian (@mandubian) <a href=\"https://twitter.com/mandubian/status/289422662101504000\">10 janvier 2013</a></blockquote>\n\n<p>It is <a href=\"http://wtfjs.com/\">common</a> in Javascript to have unexpected behaviors, but this one is particulary vicious.</p>\n<blockquote>\n<p>10000000000000000 === 10000000000000001</p>\n</blockquote>\n<p><strong>Javascript doesn’t have integer type but lets you think it has.</strong> <code>parseInt</code> and <code>parseFloat</code> built-in functions, the fact that “1″ is displayed as “1″ and not as “1.0″ (like many languages) contribute to the general misunderstood.</p>\n<p><strong>In Javascript, all numbers are floating numbers and are prone to <a href=\"https://en.wikipedia.org/wiki/Floating_point\">floating point approximation</a>.</strong></p>\n<p>When you write <code>var i = 1;</code>, and you console.log it, Javascript is nice, you obtain <code>1</code> and not <code>1.0000000000000001</code>. </p>\n<p>But you can experiment that, in Javascript, <code>1.0000000000000001 === 1</code> is true…</p>\n<blockquote>\n<p>I hear you, telling me that <em>this sounds OK, floating point approximation rules, right?</em></p>\n</blockquote>\n<p>But the same thing occurs for big numbers:</p>\n<pre><code class=\"language-javascript\">10000000000000000 === 10000000000000001\n</code></pre>\n<p>Oh <strong>F**K</strong> !</p>\n<p>[edit] where in python:<br><img src=\"https://pbs.twimg.com/media/BAg2wRyCIAAGuXW.png:large\" alt=\"\"></p>\n<h2 id=\"termination-of-loops\">Termination of loops</h2>\n<p>The following is worse:</p>\n<script src=\"https://gist.github.com/4504986.js\"></script>\n\n<p>is logging <code>10000000000000000</code> forever!</p>\n<p>Because 10000000000000001 can’t exist in Javascript with approximations, 10000000000000001 is 10000000000000000, so you can’t increment this value, and you are stuck in this crazy f**king loop. </p>\n<p>Conclusion, <em>Program termination proof</em> sounds hard to reach in Javascript!</p>\n<!--more-->\n\n<h2 id=\"how-many-numbers-in-a-1000-range\">How many numbers in a 1000 range?</h2>\n<p>Between 10000000000000000 and 10000000000001000, there are actually 750 Javascript integers.</p>\n<script src=\"https://gist.github.com/4505510.js\"></script>\n\n<h2 id=\"real-world-example\">Real World Example</h2>\n<p>The issue can actually <strong>lead to real web application disaster</strong>. Imagine if your database use Long for id (well like almost every databases in the world, like twitter does), and <strong>if you use the id as number in Javascript and not as string</strong>, you can have strange behaviors like never being able to represent and access a resource from the Javascript or worse!</p>\n<script src=\"https://gist.github.com/4505517.js\"></script>\n\n<h2 id=\"tldr-the-lesson\">TL;DR. The lesson</h2>\n<p>This is not something new, floating point approximation, but the way Javascript fix values to round the approximations mislead us.</p>\n<p>Now, simple thing, <strong>Avoid numbers when approximation is not permitted</strong> like for resource id (especially when you retrieve it from a server).</p>\n<p>This probably impacts your JSON APIs because it’s the last thing you had think of!</p>\n<p>Otherwise, <strong>if you need to manipulate big integers in Javascript use a library for that</strong>.</p>\n<p>Example: <a href=\"http://silentmatt.com/biginteger/\">http://silentmatt.com/biginteger/</a></p>\n<p>[EDIT]<br>9007199254740993 (which is 2^53 1) is the smallest not representable integer in Javascript. In other words, you can trust Javascript numbers before this integer!</p>\n<p>[EDIT 2]<br><a href=\"http://news.ycombinator.com/item?id=5051525\">Thanks to 0×0 on HackerNews</a> who told me the twitter id issue example really happened in a previous twitter API: </p>\n","data":{"title":"Be careful with JS numbers!","description":"Javascript doesn’t have integer type but lets you think it has. In Javascript, all numbers are floating numbers and are prone to floating point approximation.","author":"Gaetan","layout":"post","permalink":"/2013/01/be-careful-with-js-numbers/","tags":["float","javascript"]}},"__N_SSG":true}