{"pageProps":{"id":"2013-07-17-QanimationFrame","year":"2013","month":"07","day":"17","slug":"QanimationFrame","content":"<h1 id=\"a-world-of-promises-episode-3\">A <a href=\"/pages/a-world-of-promises/\">World Of Promises</a>, episode 3</h1>\n<img src=\"/images/2013/07/qanimationframe.jpg\" alt=\"\" class=\"thumbnail-left\" style=\"width: 200px\" />\n\n<p><em>This third article on <a href=\"http://github.com/gre/qanimationframe\">Q</a> is a little parenthesis to the Qep articles series,\nfeaturing the <code>requestAnimationFrame</code> Javascript function and its general usage,\nand <a href=\"http://github.com/gre/qanimationframe\">QanimationFrame</a>, its Promisified version used as a &quot;wait for DOM to be ready&quot; API.</em></p>\n<!--more-->\n\n<h2 id=\"requestanimationframe\"><code>requestAnimationFrame</code></h2>\n<p><code>requestAnimationFrame</code> is a function which <strong>delays a Javascript function execution to the next browser render frame</strong>.\nIt takes one argument in parameters which is <strong>the function to call on next repaint</strong>.\n<em>(N.B. there is not anymore a second DOM parameter like a few months ago, see the <a href=\"https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/RequestAnimationFrame/Overview.html\">spec</a>)</em></p>\n<h3 id=\"for-animation-loop\">...for animation loop</h3>\n<p><code>requestAnimationFrame</code> helps to easily make a <strong>render loop</strong>:</p>\n<pre><code class=\"language-javascript\">(function loop(){\n  requestAnimationFrame(loop);\n  render();\n}());\n</code></pre>\n<p>In that example, the <code>render</code> function can contains any Javascript code which updates\nsome graphics either using Canvas or DOM.</p>\n<p>A good practice is to always <strong>compute time-relative</strong> animations and \nnever assume the framerate to be constant.</p>\n<pre><code class=\"language-javascript\">function badRenderFunction() {\n someObject.x += 0.1; // 10 pixels per 100 frame.\n // not so good with non-constant framerate\n}\n</code></pre>\n<pre><code class=\"language-javascript\">var lastTime = Date.now();\nfunction goodRenderFunction() {\n var now = Date.now();\n var delta = now-lastTime; // in milliseconds\n lastTime = now;\n someObject.x += 0.01 * delta; // 10 pixels per second\n // good because function of time\n}\n</code></pre>\n<p>More information on <code>requestAnimationFrame</code> can be found <a href=\"http://creativejs.com/resources/requestanimationframe/\">here</a> or <a href=\"http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\">here</a>.</p>\n<h3 id=\"for-waiting-a-dom-update\">...for waiting a DOM update</h3>\n<p><strong>We will now focus on another interesting benefit of that function:</strong></p>\n<p>Instead of using <code>requestAnimationFrame</code> for a render loop,\n<strong>you can use it only once</strong> in order to <strong>wait for the next DOM update</strong>.</p>\n<p>There is a lot of use-cases where you need to wait for the next DOM update \nand <code>requestAnimationFrame</code> is perfect for that.</p>\n<p>Most of the code you can see on the internet rely on using a <code>setTimeout</code> with an arbitrary time\ngiven in second parameters <em>(sometimes 30, sometimes 0 !?)</em>.\nThis is, in my humble opinion, a wrong approach because you will never know if the repaint has \nreally been performed.</p>\n<h2 id=\"qanimationframe\">QanimationFrame</h2>\n<p><code>QanimationFrame</code> is a function which takes a <strong>DOM Element</strong> in parameter and return a \n<strong>Promise of that &quot;ready&quot; DOM element</strong>.</p>\n<p><strong><code>QanimationFrame (elt: DOM Element) =&gt; Promise[DOM Element]</code></strong></p>\n<p><strong>N.B.:</strong> Even if <code>requestAnimationFrame</code> doesn&#39;t have anymore a second <em>DOM element</em> parameter,\nI found it quite cool that you can give it as argument and retrieve it back to manipulate it.\nIt also makes the function more composable because it behaves like an identity Promise function.\nWe will also see benefits when using with other DOM Promise libraries.</p>\n<h3 id=\"basic-example\">Basic example</h3>\n<pre><code class=\"language-javascript\">var elt = document.createElement(&quot;div&quot;);\nelt.innerHTML = &quot;Hello world&quot;;\n// wait for the DOM to be ready before using the height\nQanimationFrame(elt).then(function (elt) {\n  console.log(&quot;height=&quot;+elt.offsetHeight);\n});\n</code></pre>\n<h3 id=\"composability\">Composability</h3>\n<pre><code class=\"language-javascript\">function createDivInBody (html) {\n  var elt = document.createElement(&quot;div&quot;);\n  elt.innerHTML = html;\n  document.body.appendChild(elt);\n  return elt;\n}\n\nvar height = \nQ.fcall(createDivInBody, &quot;Hello world!&lt;br/&gt;How are you today?&quot;)\n .then(QanimationFrame)\n .then(function (elt) {\n   return elt.offsetHeight;\n });\n\nheight.then(function(height){\n  console.log(&quot;height is &quot;+height);\n});\n</code></pre>\n<p>There is of-course a lot of more examples and use-cases of that library.</p>\n<h2 id=\"next-episode\">Next episode</h2>\n<p>Next episode is a big one!</p>\n<p>We will introduce you a Promisified animation library called <strong>Zanimo.js</strong> which\nhelps to chain different <strong>CSS transitions with only Promises</strong>.\nIt is very interoperable with any other Promise library,\nmeaning that you can easily chain Zanimo animations with other asynchronous actions.</p>\n","data":{"title":"Qep3.: QanimationFrame","description":"This third article on Q is a little parenthesis to the Qep articles series, featuring the requestAnimationFrame Javascript function and its general usage, and QanimationFrame, its Promisified version used as a \"wait for DOM to be ready\" API.","thumbnail":"/images/2013/07/qanimationframe.jpg","author":"Gaetan","layout":"post","tags":["AWOP","javascript","promise","Q","library"]}},"__N_SSG":true}