{"pageProps":{"id":"2012-04-09-blender-as-a-2d-game-map-editor-proof-of-concept","year":"2012","month":"04","day":"09","slug":"blender-as-a-2d-game-map-editor-proof-of-concept","content":"<h1 id=\"\"></h1>\n<p>A long time ago, video games were only two-dimensional. Of-course this was due to our poor hardware capabilities, but when computers became faster and faster 3D games appeared in mass.<br><strong>Did it kill 2D games? Nope.</strong> They continue to exist because it offer a different gameplay and are easier to make. Maybe also a bit because we are nostalgic of old-school games!</p>\n<p>We can distinguish two kinds of 2D games:</p>\n<img src=\"/images/2012/04/bomberman93.jpg\" alt=\"\" class=\"thumbnail-left\" />\n[**Tile based games**][2] where the game world is simplified with a big grid – each grid position has some properties.  \nA map editor is not always needed for tile based games, because the map can be straighforward to represent and maintain like in a *Bomberman* or in a *Pacman*. A simple editor is generally used to make graphism with sprites.\n\n<br style=\"clear:both\" />\n\n<img src=\"/images/2012/04/woarpc001.jpg\" alt=\"\" class=\"thumbnail-left\" />\n**Non-tile based games**, which can be called “polygon based games” are more complex.  \nIn such game, like a *Worms* or a *Sonic*, it’s totally crazy to write the map by hand (objects positions, polygons coordinates, …). The alternative, is not to use predefined maps, but on-the-fly generated maps which doesn’t fit every games.\n\n<br style=\"clear:both\" />\n  \n<p><a href=\"http://higherorderfun.com/blog/2012/05/20/the-guide-to-implementing-2d-platformers/\">Here are more detailed work on these different game designs</a>.</p>\n<p><strong>Making the game engine</strong> is one thing, but <strong>designing the game levels</strong> can be one big work too and <strong>we need tools to make it easier</strong>.</p>\n<!--more-->\n\n<h2 id=\"tile-based-game-maps\">Tile based game maps</h2>\n<p>In tile based games, maps are usually quite simple to represent.</p>\n<p>For instance, here is how we can code the maze of <a href=\"http://www.masswerk.at/JavaPac/JS-PacMan2.html\">Pacman</a>:</p>\n<pre><code class=\"language-javascript\">[\n  &quot;ahhhhhgxbhhdxehhhhhc&quot;,\n  &quot;vp....o......o....pv&quot;,\n  &quot;v.lhm...lhhm...lhm.v&quot;,\n  &quot;v.....n......n.....v&quot;,\n  &quot;v.n.n.v.ahhc.v.n.n.v&quot;,\n  &quot;d.v.o.v.vxxq.v.o.v.b&quot;,\n  &quot;x.v...v.vxxt.v...v.x&quot;,\n  &quot;c.bhm.o.bhhr.o.lhd.a&quot;,\n  &quot;v........x.........v&quot;,\n  &quot;em.lc.am.lm.lc.am.lg&quot;,\n  &quot;v...v.v......v.v...v&quot;,\n  &quot;v.k.o.o.lhhm.o.o.k.v&quot;,\n  &quot;vp................pv&quot;,\n  &quot;bhhhhhcxahhcxahhhhhd&quot;,\n];\n</code></pre>\n<p>where every character is a tile and has a given meaning.</p>\n<p>For more complex games, we can also represent the map with a set of objects, and each object has position and size properties (x, y, width, height) and other properties for the game logic.</p>\n<p>For instance, see the <em>ImpactJS</em> tile based games editor:</p>\n<p><a href=\"http://impactjs.com/documentation/weltmeister\"><img src=\"/images/2012/04/weltmeister-tutorial-entities.png\" alt=\"\"></a></p>\n<h2 id=\"but-what-about-polygons-based-game\">But what about polygons based game?</h2>\n<p>Well, some have tried to make dedicated 2D game map editor like shown in this video:</p>\n<iframe width=\"640\" height=\"360\" src=\"http://www.youtube.com/embed/kvvEmm2Vyoc?feature=player_embedded\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>but it sounds a bit unfinished and specific.</p>\n<h3 id=\"do-it-yourself-but-dont-reinvent-the-wheel\">Do it yourself, but don’t reinvent the wheel.</h3>\n<p><strong>But finally, isn’t it what a 3D editor is doing?</strong></p>\n<p>Isn’t it the most generic tool we can find?</p>\n<p>They have done a lot of awesome work in term of user interface, polygon modeling, textures (procedural / bitmap), …let’s profit of all this work to generate awesome texture map while exporting polygons.</p>\n<p>Relying on such tools, you don’t have to learn a brand new map editor, you can relax on what you know if you have the chance to know Blender or Maya or anything.</p>\n<h3 id=\"the-z-magic\">The Z magic</h3>\n<p>Let’s ignore the Z dimension, or rather, let’s <strong>use the Z-dimension as a way to represent the semantics of the game map!</strong></p>\n<p>This is the map I made for <a href=\"http://gre.github.io/blazing-race\">Blazing Race</a>, a HTML5 against-the-clock platform game where you control a fireball:</p>\n<p><img src=\"/images/2012/04/zs.png\" alt=\"\"></p>\n<p>For my game needs, I used <strong>different Z layers to represent different kind of materials and game objects</strong>:</p>\n<ul>\n<li>z=1 : candles’ position – the objective of the game is to light them all</li>\n<li>z=0 : the game grounds – where collision occurs</li>\n<li>z=-1 : the water areas – where your flame dies</li>\n<li>z=-2 : special areas where you miss oxgyen – your flame dies in a few seconds</li>\n</ul>\n<p>But I also used <strong>objects ids</strong> as an another way to distinguish objects:<br>a “start” object to define the game start position and two “topleft” and “bottomright” objects to define the game bound.</p>\n<h3 id=\"maintain-your-map-source-in-one-file\">Maintain your map source in one file</h3>\n<p>Another powerful feature of this, is you can maintain your map polygons AND your map textures in a single way. Use your 3D editor as a polygon editor and use its render engine to generate textures:</p>\n<p><img src=\"/images/2012/04/map1.png\" alt=\"\"></p>\n<p>Take benefits from what your 3D editor can do.</p>\n<h3 id=\"export-polygons-to-the-javascript-game\">Export polygons to the Javascript game</h3>\n<p><img src=\"/images/2012/04/path4850.png\" alt=\"\"></p>\n<p>I’ve made a transformer which take a COLLADA file in input (the most commonly supported standard format to describe a 3D scene, you can export it from any 3D editor like Blender, Maya, 3DS…) which extract and transform relevant informations from it and give you a json map for your game in output.</p>\n<p><em>It was quite simple to implement, thanks to the Three.js COLLADA importer!</em></p>\n<p>Here is the current (unfinished) interface for this:</p>\n<p><a href=\"http://gre.github.io/blazing-race/maps/converter/\"><img src=\"/images/2012/04/demo_screenshot.png\" alt=\"\"></a></p>\n<p>As a proof of usability of the output JSON map, the preview was only made in a few lines of Javascript code.</p>\n<p>Extract:</p>\n<pre><code class=\"language-javascript\">function draw(map) {\n  var container = $(&quot;#viewport&quot;).empty();\n  $(&quot;#legend&quot;).empty();\n  a = 0;\n  var w = 500;\n  var h = Math.floor((w * map.height) / map.width);\n  var CROSS_SIZE = 3;\n  var canvas = $(&#39;&lt;canvas width=&quot;&#39; + w + &#39;&quot; height=&quot;&#39; + h + &#39;&quot;&gt;&lt;/canvas&gt;&#39;);\n  var ctx = canvas[0].getContext(&quot;2d&quot;);\n  for (var name in map) {\n    var objs = map[name];\n    if (objs[0] &amp;&amp; objs[0].faces) {\n      var color = randomColor(70, 0.8);\n      ctx.fillStyle = color;\n      for (var i = 0; i &lt; objs.length; ++i) {\n        var obj = objs[i];\n        for (var f = 0; f &lt; obj.faces.length; ++f) {\n          var face = obj.faces[f];\n          ctx.beginPath();\n          for (var v = 0; v &lt; face.length; ++v) {\n            var vertice = obj.vertices[face[v]];\n            var x = (ctx.canvas.width * vertice.x) / map.width;\n            var y = ctx.canvas.height * (1 - vertice.y / map.height);\n            if (v == 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n          }\n          ctx.fill();\n        }\n      }\n      addLegend(color, name, true);\n    }\n  }\n  for (var name in map) {\n    var objs = map[name];\n    if (objs[0] &amp;&amp; objs[0].x) {\n      var color = randomColor(50);\n      ctx.strokeStyle = color;\n      ctx.lineWidth = 2;\n      for (var i = 0; i &lt; objs.length; ++i) {\n        var p = objs[i];\n        var x = (ctx.canvas.width * p.x) / map.width;\n        var y = ctx.canvas.height * (1 - p.y / map.height);\n        ctx.beginPath();\n        ctx.moveTo(x - CROSS_SIZE, y);\n        ctx.lineTo(x + CROSS_SIZE, y);\n        ctx.moveTo(x, y - CROSS_SIZE);\n        ctx.lineTo(x, y + CROSS_SIZE);\n        ctx.stroke();\n      }\n      addLegend(color, name, false);\n    }\n  }\n  container.append(canvas);\n}\n</code></pre>\n<h2 id=\"what-is-next\">What is next?</h2>\n<p>Blazing Race, is not finished yet, I need to improve a lot of things.</p>\n<p>I’ll try to release a standalone version of this converter soon with tutorials and examples.</p>\n","data":{"title":"Blender as a 2D game level editor – Proof Of Concept","description":"Here is how you can design and export your 2D game map with Blender (both the logic and the graphics).","thumbnail":"/images/2012/04/map1.png","author":"Gaetan","layout":"post","permalink":"/2012/04/blender-as-a-2d-game-map-editor-proof-of-concept/","tags":["gamedev","blender","javascript"]}},"__N_SSG":true}