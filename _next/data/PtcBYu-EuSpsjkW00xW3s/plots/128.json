{"pageProps":{"n":"128","plot":{"n":"128","key":"./128/README.md","rustFile":"128/main.rs","content":"<p>Parametric flower plotted with two brush pens. It is challenging to get the correct pen height when working with brush pens. I used two parametric functions with a slight displacement to reveal some moir√© patterns created by the divergence.</p>\n","data":{"title":"Pentaflower","thumbnail":"/images/plots/128.jpg","description":"Parametric flower plotted with two brush pens.","tags":["parametric","brush"]}},"prev":{"n":"127","key":"./127/README.md","rustFile":"127/main.rs","content":"<p>another parametric plotted with a brush pen and &#39;Bloody Brexit&#39; ink by Diamine.</p>\n","data":{"title":"Parametric brush","thumbnail":"/images/plots/127.jpg","description":"another parametric plotted with a brush pen and 'Bloody Brexit' ink by Diamine.","tags":["parametric","brush"]}},"next":{"n":"129","key":"./129/README.md","rustFile":"129/main.rs","content":"<p>Here is &quot;Jumping blob&quot; my second <a href=\"https://greweb.me/2021/05/plot-loops\">&quot;plot loop&quot; (see article)</a>. The main digital art is a 1920p video loop of 8 frames available as a <a href=\"https://www.hicetnunc.xyz/objkt/71006\">Tezos hicetnunc NFT</a>. The physical art is 8 frames of A5 size, the square of the drawing is 12cm by 12cm and they are offered when <a href=\"https://www.hicetnunc.xyz/objkt/71006\">buying the NFT</a> (8 editions, assigned in buy order).</p>\n<p>There are 8 frames plotted recreating the &quot;jumping blob&quot; animation (shader implemented in <a href=\"https://greweb.me/shaderday/67\">https://greweb.me/shaderday/67</a>). Each frame is plotted with two fountain pens (Diamine inks: Pink and Turquoise) on Canson Bristal (A5 format), and takes about an hour to plot.</p>\n<img width=\"100%\" src=\"/images/plots/129_all.jpg\" />\n\n<p>Each frame revisit a specific technique that I explored in the past months:</p>\n<ul>\n<li>Frame 1: Voronoi distribution + samples spiral</li>\n<li>Frame 2: Voronoi distribution + samples sorted</li>\n<li>Frame 3: Voronoi polygons</li>\n<li>Frame 4: Voronoi distribtion + TSP</li>\n<li>Frame 5: sampling points and starting lines with vector field (low frequency)</li>\n<li>Frame 6: sampling points and starting lines with vector field (aligned horizontally)</li>\n<li>Frame 7: sampling points and starting lines with vector field (more curvy)</li>\n<li>Frame 8: circles plotting</li>\n</ul>\n<p><img width=\"50%\" src=\"/images/plots/129_zoom1.jpg\" /><img width=\"50%\" src=\"/images/plots/129_zoom2.jpg\" /></p>\n<p>The generator was completely reimplemented, including the &quot;scene&quot; itself which is a port of the GLSL code into Rustlang with some adjustments (two different colors are spread on different areas):</p>\n<pre><code class=\"language-rust\">fn jumping_blob(f: f64, o: (f64, f64)) -&gt; Vec&lt;f64&gt; {\n    let mut p = o;\n    let bezier = Bezier::new(0.0, 0.1, 1.0, 0.9);\n    let x = bezier.calculate(f as f32) as f64;\n    let t = x * 2. * PI;\n    let radius = 0.18;\n    let smoothing = 0.15;\n    let dist = 0.2;\n    p.0 -= 0.5;\n    p.1 -= 0.5;\n    p.1 *= -1.0;\n    p = p_r(p, PI / 2.0);\n    let q = p;\n    p = p_r(p, -t);\n    let s = f_op_difference_round(\n        f_op_union_round(\n            q.0.max(0.1 + q.0),\n            length((p.0 + dist, p.1)) - radius,\n            smoothing,\n        ),\n        length((p.0 - dist, p.1)) - radius,\n        smoothing,\n    );\n    let v = smoothstep(-0.6, 0.0, s).powf(2.0)\n        * (if s &lt; 0.0 { 1.0 } else { 0.0 });\n    vec![\n        v * (0.001 + smoothstep(-0.5, 1.5, p.0)),\n        v * (0.001 + smoothstep(1.5, -0.5, p.0)),\n    ]\n}\nfn p_r(p: (f64, f64), a: f64) -&gt; (f64, f64) {\n    (\n        a.cos() * p.0 + a.sin() * p.1,\n        a.cos() * p.1 - a.sin() * p.0,\n    )\n}\nfn length(l: (f64, f64)) -&gt; f64 {\n    (l.0 * l.0 + l.1 * l.1).sqrt()\n}\nfn f_op_union_round(a: f64, b: f64, r: f64) -&gt; f64 {\n    r.max(a.min(b))\n        - length(((r - a).max(0.), (r - b).max(0.)))\n}\nfn f_op_intersection_round(a: f64, b: f64, r: f64) -&gt; f64 {\n    (-r).min(a.max(b))\n        + length(((r + a).max(0.), (r + b).max(0.)))\n}\nfn f_op_difference_round(a: f64, b: f64, r: f64) -&gt; f64 {\n    f_op_intersection_round(a, -b, r)\n}\n</code></pre>\n<img width=\"100%\" src=\"/images/plots/129_zoom3.jpg\" />\n\n<p>It&#39;s one of the first time I try to work on the &quot;scene composition&quot; and I&#39;ve also used a pattern filled with &quot;+&quot; for the background. I want to explore more of these in the future.</p>\n<!--\nJumping Blob (8 frames)\n@greweb's #2 plot loop. The 1920p animation is the main & digital art. First buyer also can collect one frame of the physical art (PM @greweb, ship anywhere in the world, frame # in buy order). Secondary market is digital only. There are 8 frames, one for each NFT edition. drawing is 12cm square, centered on a A5 bristol paper, two fountain pens. See greweb.me/plots/129\nanimated, plot, plotloop, physical, phygical\n-->\n","data":{"title":"Jumping blob (8 frames)","thumbnail":"/images/plots/129.gif","description":"8 frames plotted making an animated loop of a jumping blob. A 1920p video and 12cm square physical art is available as an NFT.","tags":["plotloop"],"objkts":[71006]}}},"__N_SSG":true}