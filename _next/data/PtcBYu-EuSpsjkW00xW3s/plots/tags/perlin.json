{"pageProps":{"tag":"perlin","plots":[{"n":"164","key":"./164/README.md","rustFile":"164/main.rs","content":"<p><strong>Every NFT sold allows acquiring a plotted frame. (code in the unlockable content)</strong></p>\n<p><nft-card contractAddress=\"0x495f947276749ce646f68ac8c248420045cb7b5e\" tokenId=\"47428341271170390733253974222101382154768714392453356712130950043610789183496\"> </nft-card> <script src=\"https://unpkg.com/embeddable-nfts/dist/nft-card.min.js\"></script></p>\n<p><video loop autoplay controls src=\"/images/plots/164-showcase.mp4\" width=\"100%\"></video></p>\n<p>My 7th <a href=\"/plots/tags/plotloop\">plotloop</a> is a very special one, inspired from the mother of all of my plot loops: <a href=\"/plots/108\">plot#108</a> which wasn&#39;t planned to be animated but a way to visualize randomness and chose one frame! This is still what gave me the idea to do these plot loops.</p>\n<blockquote>\n<p>The concept of Plot Loop, as described in <a href=\"https://greweb.me/2021/05/plot-loops\">https://greweb.me/2021/05/plot-loops</a> article, is an hybrid concept between a digital video art and physical plot that produces topology of the same art.</p>\n</blockquote>\n<p>The main digital art is a 1920p video loop of 8 frames available as NFT on Opensea.io sold by <a href=\"https://twitter.com/achetezdelart\">@achetezdelart</a> famous Paris&#39; art gallery. I am so thrilled to work for the first time with an art gallery and looking forward to do more collaboration in the future! The physical art is the 8 frames, plotted with 3 fountain pens on Bristol A4 paper (250g), and offered when buying the NFT.</p>\n<h2 id=\"24-hours-of-near-non-stop-plotting\">24+ hours of near non-stop plotting!</h2>\n<p>Once the coding was done, the hard part was the precision work of plotting 8 frames, each taking 2 hours to achieve. With all the fail and retry there were, it took me more than a day to finish it all. The sun strokes takes about 10 minutes but the rest takes around 100 minutes.</p>\n<p><video loop autoplay controls src=\"/images/plots/164-plotting-speed-x200.mp4\" width=\"100%\"></video></p>\n<h2 id=\"zoom-photos\">Zoom photos</h2>\n<img src=\"/images/plots/164zoom.jpg\" width=\"100%\" />\n\n<h2 id=\"proof-of-plot-a-very-time-consuming-creation-process\">&quot;Proof of Plot&quot;, a very time-consuming creation process</h2>\n<p>The creation process of this plot loop was one of the most challenging one, among all of the other plots I have done so far. The fact each frame takes about 2 hours to plot with 2 manual actions (changing the fountain pens) makes any mistake very punishing! You can&#39;t faster the 2 hours much without risking the paper to suffer faced to the number of stroke of the fountain pen!</p>\n<h3 id=\"fail-and-retry\">Fail and retry</h3>\n<p>Yet, plotting is a fail and retry process, so I like to show you 2 failures first among 4 of my first prototype fails:</p>\n<p><img width=\"50%\" src=\"/images/plots/164-fail1.jpg\"><img width=\"50%\" src=\"/images/plots/164-fail2.jpg\"></p>\n<p>For anyone familiar with plot and fountain pens this is indeed one of the worse nightmare to deal with: too much stroke-crowded area is going to badly end up with literally digging through the paper.</p>\n<h3 id=\"quick-technique-to-solve-this-problem\">Quick technique to solve this problem</h3>\n<p>A very simple technique I call the &quot;passage counter&quot; technique. It&#39;s simply the use of a 2D Grid where each cell have a counter that you increment when a line goes through it, when it reaches 3 (or more) that&#39;s where you start raising the pen in these crowded area.</p>\n<img width=\"300px\" src=\"/images/plots/164-grid.png\">\n\n<p>It works great with the limitation that too much up and down of your pen is both time consuming but also can be hurting the paper too, there there is a tradeoff to find.</p>\n<h3 id=\"some-interesting-creative-coding-techniques-used\">Some interesting creative coding techniques used</h3>\n<h4 id=\"sun-rays-projection\">sun rays projection</h4>\n<p>For the sun rays, I&#39;ve used a simple radial projection that collides with the mountain lines.\nI had to make lines randomly starting at different places to avoid the effect to be too condensed at the beginning (problem of radial projection is your lines get more and more distanced). I wanted it to not be that &quot;random&quot; so i&#39;ve used a simple prime number formula: distance to center of sun is added of an extra <code>8. + ((i * 29) % 121) as f64</code> where <code>i</code> is the ray index.</p>\n<h4 id=\"sun-oscillation\">sun oscillation</h4>\n<p>I didn&#39;t wanted to make the sun motion too realistic but I wanted a visible motion that would fit with the mountains and project rays from different positions. It also had to be looping (which a sunset/sunrise wouldn&#39;t allow)</p>\n<p>Therefore, I went with a simple trigonometry formula:</p>\n<pre><code class=\"language-rust\">let sunp = (\n  w / 2. + 75. * (2. * PI * sunphase).cos(),\n  50. - 30. * (2. * PI * sunphase).sin().abs()\n);\n</code></pre>\n<h4 id=\"mountain-oscillation-and-noise-shape\">mountain oscillation and noise shape</h4>\n<p>The noise algorithm I used was much more accomplished than in <a href=\"/plots/108\">plot#108</a> even though that historical plot one is interesting too.</p>\n<p>I learned recently the power of &#39;domain warping&#39; on applied on noise and I applied it here, at least mainly on the 1D of the wave. It creates more &quot;local minima&quot; on the shape and creates a more interesting animation.</p>\n<p>It&#39;s important to also note that noise/perlin noise, is quite challenging to &quot;loop&quot; and the way I did this is interpolation between 3 states. I have simply done this:</p>\n<pre><code class=\"language-rust\">let n1 = perlin.get([ a, b, opts.seed + i as f64 * divergence + 200.2 ]);\nlet n2 = perlin.get([ a, b, opts.seed + i as f64 * divergence + 300.514 ]);\nlet n3 = perlin.get([ a, b, opts.seed + i as f64 * divergence + 400.31 ]);\nlet n = 0.8 * \n    (\n        n1 * (2. * PI * p).cos() +\n        n2 * (2. * PI * (p + 0.33)).cos() +\n        n3 * (2. * PI * (p + 0.66)).cos()\n    ) +\n    // global disp\n    0.2 * perlin.get([\n        freq * xp,\n        freq * y,\n        opts.seed\n    ]);\n</code></pre>\n<p>where <strong>a</strong> and <strong>b</strong> are noise themselves to apply the &quot;domain warping&quot; magic.</p>\n","data":{"title":"Montagne muable (8 frames)","thumbnail":"/images/plots/164.gif","description":"","tags":["plotloop","mountain","perlin"]}},{"n":"150","key":"./150/README.md","rustFile":"150/main.rs","content":"<!--\n@greweb's #5 plot loop. The 1920p animation is the main digital art. NFT is available in 8 editions, one per frame. First buyer of each edition can collect related frame to acquire the physical art (selected by buy order. PM @greweb, ship anywhere in the world). Secondary market is digital only. plotted on A4 Bristol paper with fountain pen. See greweb.me/plots/150\n-->\n\n<p>Here is &quot;Dancing Planet&quot;, my 5th <a href=\"/plots/tags/plotloop\"><strong>plot loop</strong></a> <a href=\"https://greweb.me/2021/05/plot-loops\">(see article)</a>. <strong>The main digital art is a 1920p video loop of 8 frames available as a <a href=\"https://www.hicetnunc.xyz/objkt/105425\">Tezos hicetnunc NFT</a></strong>. The physical art are the 8 frames, plotted with 2 fountain pens on Bristol A4 paper (250g), and offered when <a href=\"https://www.hicetnunc.xyz/objkt/105425\">buying the NFT</a>.</p>\n<p>There are 8 plots available for sale and there will be no other editions of these plot loop frames. They all have the same inital price and the physical piece is selected in order of buy as each frame is relatively similar!</p>\n<img src=\"/images/plots/150-plots.jpg\" width=\"100%\">\n\n<p>This is a reboot of <a href=\"/plots/148\">plot#148</a> but with a big rework of the noise technique using domain warping as well as combination with this famous &#39;rotating dancer&#39; GIF.</p>\n<p>It is plotted with two phases, a first pass without a lot of noise and a second pass with more noise divergence:</p>\n<img src=\"/images/plots/150-phases.gif\" width=\"100%\">\n\n<img src=\"/images/plots/150-zoom1.jpg\" width=\"100%\">\n<img src=\"/images/plots/150-zoom2.jpg\" width=\"100%\">\n<img src=\"/images/plots/150-zoom3.jpg\" width=\"100%\">\n\n<h2 id=\"early-prototype-in-pursuit-of-the-good-ink-and-paper\">Early prototype, in pursuit of the good ink and paper...</h2>\n<p>I started with this first prototype of the concept:</p>\n<img src=\"/images/plots/150-proto1.jpg\" width=\"100%\">\n\n<p>It allowed me to see what I could adjust, for instance: adding more noise, more lines and scaling a bit the dancer.</p>\n<p>I used ink &#39;Quink&#39; by Parker plotted with a fountain pen on a Canson Bristol 250g paper (A4 format).</p>\n<p>Here is another prototype I tried: it uses a mix of two colors (dragon red and turquoise). <strong>I ended up preferring minimalism: black on white. At the end I stayed on my first ink choice but I will revisit this idea.</strong></p>\n<p><img src=\"/images/plots/150-proto2.jpg\" width=\"57%\"><img src=\"/images/plots/150-proto2-zoom.jpg\" width=\"42.8%\"></p>\n<h2 id=\"process-to-find-the-final-plot\">Process to find the final plot</h2>\n<p>To search for the good parameters I&#39;ve used a generator script with bash for loops. It kinda looked like this:</p>\n<pre><code class=\"language-sh\">for a in 0.5 1 2 4; do\nfor b in 0.5 1 2 4; do\nfor c in 0.5 1 2 4; do\nfor d in 0.5 1 2 4; do\n  sh $P/gen.sh --a $a --b $b --c $c --d $d\n  cp ./results/out.gif out/${a}_${b}_${c}_${d}.gif\ndone\ndone\ndone\ndone\n</code></pre>\n<p>Then I kept refining my &quot;range&quot; by fail and retry. It is quite slow to generate them so it&#39;s a long process.</p>\n<p>When I was satisfied by the parameters, I then switch to a second selection: the selection of the seed! because my noise have seed and can generate very different kind of noises, I put it against my &quot;elector&quot; homemade tool as explained on <a href=\"/plots/143\">plot#143</a>.</p>\n<img src=\"/images/plots/150-selection.png\" width=\"100%\">\n\n<h2 id=\"some-highlight-of-the-rustlang-code\">Some highlight of the Rustlang code</h2>\n<p>There is nothing really &quot;new&quot; from my previous plots, especially all the parametric plot when I started this &quot;growing parametric&quot; exploration between <a href=\"/plots/114\">plot#114</a> and <a href=\"/plots/148\">plot#148</a>.</p>\n<p>What is new here however is the use of a GIF as an input. It&#39;s very easy to do: my script takes basically an loop percentage which I can transpose to looking up a frame in the rotating dancer loop. I can then use this function I&#39;ve just added to my utilities:</p>\n<pre><code class=\"language-rust\">use image::AnimationDecoder;\nuse image::RgbaImage;\nuse image::gif::GifDecoder;\nuse image::io::Reader as ImageReader;\n\npub fn image_gif_get_color(\n    path: &amp;str,\n    index: usize\n) -&gt; Result&lt;\n    impl Fn((f64, f64)) -&gt; (f64, f64, f64),\n    image::ImageError,\n&gt; {\n    let file_in = File::open(path)?;\n    let decoder = GifDecoder::new(file_in).unwrap();\n    let frames = decoder.into_frames();\n    let frames = frames.collect_frames()?;\n    let img = frames.get(index % frames.len()).unwrap();\n    let buffer = img.buffer();\n    return Ok(dynamic_image_get_color(buffer.clone()));\n}\n\npub fn dynamic_image_get_color(\n    img: RgbaImage\n) -&gt; impl Fn((f64, f64)) -&gt; (f64, f64, f64) {\n    let (width, height) = img.dimensions();\n    return move |(x, y): (f64, f64)| {\n        let xi = (x.max(0.0).min(1.0)\n            * ((width - 1) as f64)) as u32;\n        let yi = (y.max(0.0).min(1.0)\n            * ((height - 1) as f64))\n            as u32;\n        let pixel = img.get_pixel(xi, yi);\n        let r = (pixel[0] as f64) / 255.0;\n        let g = (pixel[1] as f64) / 255.0;\n        let b = (pixel[2] as f64) / 255.0;\n        return (r, g, b);\n    };\n}\n</code></pre>\n<p>Rust really shines in having great library, this is just the classical &quot;image&quot; package here.</p>\n<p>Apart from this, the Rust code (you can see main.rs link on top of this page) is pretty straightforward. There is just a lot of work in the parametric function which starts to be quite big:</p>\n<pre><code class=\"language-rust\">let parametric = |p: f64| {\n    let p1 = (splits * p).floor();\n    let p2 = splits * p - p1;\n    let t = (p1 + split_threshold * p2) / splits;\n    let mut t2 = (p1\n        + split_threshold * p2.powf(pow))\n        / splits;\n    let initial = 1. / spins;\n    t2 =\n        (t2 - initial).max(0.) / (1. - initial);\n    let scale = 1.0\n        - t2 * (1.0\n            - i as f64 * opts.size_diff / size);\n    let s = spins;\n    let mut p = (\n        scale\n            * amp1\n            * ((s * 2. * PI * t).sin()\n                + amp2\n                    * mix(\n                        (s * f1.1 * PI * t).sin(),\n                        (s * f2.1 * PI * t).sin(),\n                        t,\n                    )),\n        0.07\n        - scale\n            * amp1\n            * ((s * 2. * PI * t).cos()\n                + amp2\n                    * mix(\n                        (s * f1.0 * PI * t).cos(),\n                        (s * f2.0 * PI * t).cos(),\n                        t,\n                    )),\n    );\n    let noise_angle = p.1.atan2(p.0);\n    let noise_amp = 0.003 * perlin.get([\n            opts.a * (progress * PI).sin() +\n            4.8 * p.0 + perlin.get([\n                7.8 * p.0,\n                4.2 * p.1 + opts.b * (progress * PI).sin(),\n                40. + opts.seed\n            ]),\n            4.8 * p.1 + 0.8 * perlin.get([\n                4.5 * p.0 + opts.c * ((1. - progress) * PI).sin(),\n                6.8 * p.1 + perlin.get([\n                    20.5 * p.0 + opts.d * (2. * PI * progress).cos(),\n                    20.8 * p.1,\n                    200. + opts.seed,\n                ]),\n                20. + opts.seed,\n            ]),\n            100. + opts.seed + i as f64 * opts.seed_diff,\n        ]) +\n        0.03 * (1. - t) * perlin.get([\n            0.7 * p.0 + perlin.get([\n                2.9 * p.0 + opts.e * (2. * PI * progress).cos(),\n                1.7 * p.1,\n                2000.0\n            ]),\n            0.7 * p.1 + perlin.get([\n                3.1 * p.0,\n                2.5 * p.1 + opts.e * (2. * PI * progress).sin(),\n                2100.0\n            ]),\n            1000.,\n        ]);\n\n    p.0 += noise_amp * noise_angle.cos();\n    p.1 += noise_amp * noise_angle.sin();\n    p\n};\n</code></pre>\n","data":{"title":"Dancing Planet","thumbnail":"/images/plots/150.gif","description":"8 frames plotted making an animated loop. A 1920p video and A4 physical art is available as an NFT.","tags":["field","perlin","plotloop"],"objkts":[105425]}},{"n":"149","key":"./149/README.md","rustFile":"149/main.rs","content":"<p>A chaotic experiment of parametric function meeting perlin noise. Brush pen with &#39;Bloody Brexit&#39; ink on Bristol paper.</p>\n","data":{"title":"Chaotic Inner","description":"A chaotic experiment of parametric function meeting perlin noise. Brush pen with 'Bloody Brexit' ink on Bristol paper.","thumbnail":"/images/plots/149.jpg","tags":["perlin","parametric"]}},{"n":"148","key":"./148/README.md","rustFile":"148/main.rs","content":"","data":{"title":"Orange","thumbnail":"/images/plots/148.jpg","tags":["perlin","parametric"]}},{"n":"147","key":"./147/README.md","rustFile":"147/main.rs","content":"<p>Drawing a lot of diamond in pink and blue with dimensions varying based on perlin noise.</p>\n","data":{"title":"Diamond noise","thumbnail":"/images/plots/147.jpg","description":"Drawing a lot of diamond in pink and blue with dimensions varying based on perlin noise.","tags":["perlin"]}},{"n":"144","key":"./144/README.md","rustFile":"144/main.rs","content":"<p>A variation of <a href=\"/plots/108\">plot#108</a> with more &quot;tensed&quot; lines. The distribution creates an interesting visual illusion that edges are &quot;blurred&quot;.</p>\n","data":{"title":"tensed mountains","thumbnail":"/images/plots/144.jpg","description":"A variation of plot#108 with more 'tensed' lines. The distribution creates an interesting visual illusion that edges are 'blurred'.","tags":["perlin"]}},{"n":"143","key":"./143/README.md","rustFile":"143/main.rs","content":"<p>Here is &quot;Rainbow Roots&quot;, my 4th <a href=\"https://greweb.me/2021/05/plot-loops\"><strong>plot loop</strong> (see article)</a>. <strong>The main digital art is a 1920p video loop of 8 frames available as a <a href=\"https://www.hicetnunc.xyz/objkt/98062\">Tezos hicetnunc NFT</a></strong>. The physical art are the 8 frames, plotted with 2 fountain pens on Bristol A4 paper (250g), and offered when <a href=\"https://www.hicetnunc.xyz/objkt/98062\">buying the NFT</a>.</p>\n<p>There are 8 plots available for sale and there will be no other editions of these plot loop frames. You can chose which frame you buy as the NFT editions are segmented into different prices. 20.1 tez for the first frame, 20.2 for the second and so on up to 20.8.</p>\n<img src=\"/images/plots/143-plots.jpg\" width=\"100%\">\n\n<p>This is a reboot of <a href=\"/plots/091\">plot#091</a> with more lines and better noise technique using domain warping.</p>\n<h3 id=\"coloring\">Coloring</h3>\n<p>Each plotted frame is made with 2 fountain pens, one primary and one secondary ink. The primary color is interleaved with the second with a ratio of 2/3 for primary and 1/3 for secondary.</p>\n<p>I used 8 different inks, all by &quot;Diamine&quot; brand: Turquoise, Aurora Borealis, Bloody Brexit, Imperial Purple, Writer&#39;s Blood, Red Dragon, Pumpkin, Sepia.</p>\n<img src=\"/images/plots/143-inks.jpg\" width=\"100%\">\n\n<p>I had a last minute changes after the photo was taken: I replaced Spring Green by another color because it would have been too &quot;light&quot; for a plot. I actually tried to do one with Sepia and it was also too &quot;light&quot;, I decided to go black! I definitely have betterplans for &#39;Spring Green&#39;.</p>\n<h3 id=\"paper\">Paper</h3>\n<p>I use a Canson Bristol 250g paper which works great with fountain pen. Format A4.</p>\n<p><img src=\"/images/plots/143-zoom1.jpg\" width=\"50%\"><img src=\"/images/plots/143-zoom2.jpg\" width=\"50%\"></p>\n<h2 id=\"creation-process\">Creation process</h2>\n<p>The creation process is made of many steps, which are entirely created by me and all these steps are fully published and open sourced.</p>\n<ul>\n<li>art generator: I write a Rustlang program that generate SVG files. (see <em>main.rs</em>)</li>\n<li>GIF preview: I use a script to make a digital and theorical video of the animation. Very important for me to have an idea of the animation (even tho only plotting time will have the final surprise).</li>\n<li>plot first prototypes: I do some prototype plots to make sure the plot is good, specifically that the density chosen (number of lines) is well adjusted (too much and your paper starts to be comprised, not enough and you have too much gaps).</li>\n<li>I polish a lot the generator. Specifically on the different noise harmonies, frequencies and amplitudes.</li>\n<li>Once it&#39;s ready, i&#39;ll run a super script that loops over the &quot;video preview&quot; generation. It&#39;s time consuming as I will often stop and polish again the generator. This time it took me probably ten times to iterate like this. Literally the whole day.</li>\n<li>When I&#39;m confident, I&#39;ll generate a lot of video previews. <strong>This time I have generated 500 GIFs.</strong> It was very tricky to decide and to actually elect the final plot, I developed my own tool (see section below)</li>\n<li>Finally, I can plot them all, it takes a lot of caution on manipulating paper and fountain pens and a lot of manual actions. It is very time consuming but very rewarding. <strong>Each frame took more than an hour to plot with an AxiDraw robot.</strong></li>\n</ul>\n<h3 id=\"preview\">Preview</h3>\n<p>This is what the theorical art was going to be, this is a digital preview before doing the plot so indeed it only simulate what the actual ink was going to do. The physical art is better looking with the imperfections of the medium.</p>\n<img src=\"/images/plots/143-theorical.gif\" width=\"100%\">\n\n<h3 id=\"process-to-find-the-final-plot\">Process to find the final plot</h3>\n<p>As I&#39;m working with a generator, it can generate infinite variants of plot loops. I have generated 500 GIFs (virtual plot loops)</p>\n<p>It ended up being very tedious to try to find a good animation by manually going through the files so I literally developped an app to solve my problem and provide a voting system so I can compare in parallel different results and chose among them. It could be reused and improved in future, it&#39;s not yet &quot;generic&quot; but if there is a need for it, I would make it generic and open source it as a standalone tool.</p>\n<img src=\"/images/plots/143-elector.jpg\" width=\"100%\">\n\n<h3 id=\"early-prototype-and-special-editions\">Early prototype and Special Editions</h3>\n<p>This prototype was done to adjust some plotting parameters, specifically the number of lines.</p>\n<img src=\"/images/plots/143-prototype.jpg\" width=\"100%\">\n\n<p>I&#39;ve also made these 2 special editions one to offer a friend and one gift to buyer of one of my previous plot loop. Each of them have very specific variations of parameters (they are written on the back of the plot and i don&#39;t keep them in memory, basically they are technically not easy to reproduce identically!)</p>\n<img src=\"/images/plots/143-special1.jpg\" width=\"100%\">\n<img src=\"/images/plots/143-special2.jpg\" width=\"100%\">\n","data":{"title":"Rainbow Roots","thumbnail":"/images/plots/143.gif","description":"8 frames plotted making an animated loop. A 1920p video and A4 physical art is available as an NFT.","tags":["field","perlin","plotloop"],"objkts":[98062]}},{"n":"126","key":"./126/README.md","rustFile":"126/main.rs","content":"<p>yet another parametric spiral perturbated by perlin noise!</p>\n","data":{"title":"Parametric shield","thumbnail":"/images/plots/126.jpg","description":"yet another parametric spiral perturbated by perlin noise!","tags":["parametric","perlin"]}},{"n":"121","key":"./121/README.md","rustFile":"121/main.rs","content":"<p><a href=\"/2021/05/plot-loops\"><strong>✍️ See also: Plot loops</strong> article</a>.</p>\n<p>This first plot loop is called &quot;Triplanet&quot;. It&#39;s a transition of two parametric functions with many perlin noise displacements. This is a continuation of <a href=\"/plots/100\">&quot;Planet Holes&quot;</a> series as well as recent <a href=\"/plots/111\">&quot;Parametric stack&quot;</a> explorations.\nEvery frame is generated with a Rust script I wrote.</p>\n<p>16 frames has been plotted with fountain pen on bristol paper (ink: Red Dragon by Diamine). With a back and forth effect, this produces a 30 frames animation loop.</p>\n<img width=\"100%\" src=\"/images/plots/121_walled.jpg\"/>\n\n<p><strong>The animation is released as a NFT video</strong> on <a href=\"https://www.hicetnunc.xyz/\">hicetnunc</a>. There are 16 editions, as many as there were frames plotted. The NFT video is an art in itself.</p>\n<p>By buying a frame (by order of buy), the first buyer also chose what happens to the physical plot: either I keep it OR you can claim it (contact me on Twitter) and have me sending it anywhere in the world!</p>\n<img width=\"100%\" src=\"/images/plots/121_zoom.jpg\"/>\n\n<p><strong>Plotting with fountain pen is challenging</strong> as it requires many search on the ink, paper and many fail and retry. Plotting all these frames took an afternoon.</p>\n<img width=\"100%\" src=\"/images/plots/121_plot.jpg\"/>\n\n<!--\n@greweb's #1 plot loop. 16 physical plots, fountain pen on A4 Bristol paper, one NFT edition for each plot frame. The 1920p video animation is the digital art that can be collected as-is. First buyer also chose what happens to the frame: can claim the physical art (PM @greweb, ship anywhere in world). See greweb.me/plots/121\ntags: animated, plot, plotloop, physical\n-->\n","data":{"title":"Triplanet (16 frames)","description":"Triplanet is my first plot loop, physical animation of 16 plotted frames. transition between parametric functions and perlin noise.","thumbnail":"/images/plots/121.gif","tags":["plotloop","parametric","perlin"],"objkts":[57902]}},{"n":"117","key":"./117/README.md","rustFile":"117/main.rs","content":"<p>Another exploration of <a href=\"/plots/112\">plots#112</a>, more delicate than <a href=\"/plots/115\">plots#115</a>, with a centered noise of fibers. It uses two fountain pen inks for different color tones (Aurora Borealis and Writer&#39;s Blood from Diamine). I could try with even more lines in future but these are already almost 2 hours of plotting time! A4 on Bristol.</p>\n","data":{"title":"Noisy fibers","thumbnail":"/images/plots/117.jpg","description":"Exploration of fibers with a centered noise. two color tones.","tags":["fibers","perlin"]}},{"n":"116","key":"./116/README.md","rustFile":"116/main.rs","content":"<p><strong>Exploration of perlin noise triangle planets. various fountain pen on A4 bristol.</strong></p>\n<p>These are taking almost one hour to plot, with 2 passes of 2 different spirals. Each spiral varies a bit with different offset and displacement noise which creates a desired effect of bolder areas, caveats and craters.</p>\n<p>The displacement noise is a simple perlin noise, only one harmony is used but the noise is split into two 2 different perlin noises: the angle noise (like a vector field, different angle of displacement) and the amplitude noise (how much does the displacement move the point).</p>\n<p>The triangle is made with a parametric function, reusing technique explored on <a href=\"/plots/114\">plot#114</a>.\nThere is an important effort on finding a good balance between noise and distribution of lines (it&#39;s not linear, it&#39;s closer on edges).</p>\n","data":{"title":"Triangle planet","thumbnail":"/images/plots/116.jpg","description":"Exploration of perlin noise triangle planets. various fountain pen on A4 bristol.","tags":["parametric","perlin","planet"]}},{"n":"108","key":"./108/README.md","rustFile":"108/main.rs","content":"<img width=\"100%\" src=\"/images/plots/108.gif\" />\n\n<p>It took me 107 previous days of plotting to come up with an elegant idea: searching the best plot among many different variants can easily be done by working instead on a video of that plot! Then you can chose a frame to plot, it is both practical as well as you get a nice animation for free!</p>\n<p>Some code snippet for video generation.</p>\n<pre><code class=\"language-bash\"># generate all .svg in results, then:\ncd results\nmkdir pngs\nfor f in *.svg; do convert $f pngs/${f%.*}.png; done\nffmpeg -r 24 -i pngs/%d.png -pix_fmt yuv420p -vf &quot;pad=ceil(iw/2)*2:ceil(ih/2)*2&quot; out.mp4\n</code></pre>\n","data":{"title":"Perlin mountains","thumbnail":"/images/plots/108.jpg","objkts":[36604],"plotterfiles":["https://plotterfiles.com/profile/files/5e43a751-6fef-4abc-a92d-253fe5c890c8"],"tags":["perlin","mountains"]}},{"n":"099","key":"./099/README.md","rustFile":"099/main.rs","content":"","data":{"tweet":"https://twitter.com/greweb/status/1380454403589689351","tags":["collection","perlin","parametric"]}},{"n":"098","key":"./098/README.md","rustFile":"098/main.rs","content":"","data":{"tweet":"https://twitter.com/greweb/status/1380106073542131712","tags":["perlin","spiral","circle"]}},{"n":"091","key":"./091/README.md","rustFile":"091/main.rs","content":"<p>Experimentation of vector fields with a sinusoïdal distribution of lines.</p>\n<p>It was made in 4 editions, one for each season.</p>\n<img src=\"/images/plots/091winter.jpg\" width=\"100%\">\n<img src=\"/images/plots/091spring.jpg\" width=\"100%\">\n<img src=\"/images/plots/091summer.jpg\" width=\"100%\">\n<img src=\"/images/plots/091fall.jpg\" width=\"100%\">\n","data":{"title":"seasonal roots","thumbnail":"/images/plots/091fall.jpg","description":"Experimentation of vector fields with a sinusoïdal distribution of lines.","tags":["field","perlin"]}}]},"__N_SSG":true}