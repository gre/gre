{"pageProps":{"id":"2010-02-03-tutoriel-canvas-realiser-une-banniere-animee-en-quelques-lignes-de-code","year":"2010","month":"02","day":"03","slug":"tutoriel-canvas-realiser-une-banniere-animee-en-quelques-lignes-de-code","content":"<p><img src=\"/images/2010/animated_banner.png\" alt=\"\"></p>\n<p><strong>Pré-requis conseillé: <a href=\"/2011/03/html-canvas-pour-les-neophytes\">Voir la vidéo : HTML Canvas pour les néophytes</a></strong></p>\n<p>Le <strong>HTML 5</strong> intègre de nouvelles technologies comme le <strong>canvas</strong>, une véritable API graphique destinée à remplacer le flash dans les années à venir.</p>\n<p>Ce tutoriel vise à présenter <strong>canvas</strong> comme une <strong>librairie très simple d’utilisation et haut niveau</strong> grâce au langage <strong>javascript</strong>.</p>\n<p>Il vous apprendra à réaliser une animation similaire à la bannière <del>actuelle</del> (ancienne maintenant) de mon blog en <strong>quelques lignes de code</strong>.</p>\n<p>Il est volontairement ordonnancé de manière didactique, si vous maitriser les concepts, n’hésitez pas à avancer.</p>\n<!--more-->\n\n<h2 id=\"code-de-base-skeleton-template\">Code de base (skeleton template)</h2>\n<p>Nous allons travailler avec ce code <strong>html</strong> de base :</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;canvas id=&quot;tuto&quot; width=&quot;500&quot; height=&quot;100&quot; style=&quot;border: 1px solid;&quot;&gt;&lt;/canvas&gt;\n    &lt;script language=&quot;javascript&quot;&gt;\n      var canvas = document.getElementById(&#39;tuto&#39;);\n      var ctx = canvas.getContext(&#39;2d&#39;);\n\n      // Le code javascript ira ici\n\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Ce code nous servira dans tous le reste du tutoriel. </p>\n<h3 id=\"deux-choses-notables-\">Deux choses notables :</h3>\n<ul>\n<li>Nous avons créé un élément <strong>canvas</strong> et indiqué ses dimensions <strong>(500×100)</strong>. Pour mieux pouvoir repérer ses dimensions, nous lui avons ajouté une bordure.</li>\n<li>En <strong>javascript</strong>, nous avons récupéré l’élément DOM puis le contexte 2d qui nous servira pas la suite.</li>\n</ul>\n<h2 id=\"quelques-notions-de-base-du-canvas\">Quelques notions de base du canvas</h2>\n<h3 id=\"la-surface-du-canvas\">La surface du canvas</h3>\n<p>Le <strong>canvas</strong> occupe une surface dont la dimension est définie par les paramètres <em>width</em> et <em>height</em>.</p>\n<p>Pour ceux qui ne serait pas familier avec les <strong>bibliothèques graphiques</strong>, cette surface peut être vu comme un quadrillage de pixel sur <strong>deux dimensions</strong> : <strong>x</strong> variant de <em>0 à width</em> et <strong>y</strong> variant de <em>0 à height</em>.</p>\n<p>Le point d’origine de ce repère orthonormé est situé <strong>dans le coin haut gauche du canvas</strong>:</p>\n<p><img src=\"/demo/animate-banner/canvas-cartesian.png\" alt=\"\"></p>\n<h3 id=\"le-concept-de-contexte\">Le concept de contexte</h3>\n<p>Le contexte 2d récupéré dans la variable <strong>ctx</strong> est en fait l’<strong>interface de programmation</strong> (API) de la bibliothèque graphique <strong>canvas</strong>.</p>\n<p>C’est en quelque sorte l’<strong>intermédiaire entre le programmeur et la bibliothèque graphique</strong>.</p>\n<p>Ainsi par exemple, si l’on veux dessiner un rectangle de dimension <strong>20×10</strong> à la position <strong>(5,6)</strong>, il suffit simplement d’écrire: </p>\n<pre><code class=\"language-javascript\">ctx.fillRect(5,6,20,10)\n</code></pre>\n<h3 id=\"les-paramètres-globaux-du-canvas\">Les paramètres globaux du canvas</h3>\n<p>Pour dessiner, toute librairie graphique a besoin de connaitre un certain nombre de paramètres tels que la <em>couleur du trait, la taille de la brosse, etc</em>.</p>\n<p>Plutôt que de devoir passer en paramètre ces informations aux fonctions du contexte, <strong>canvas</strong> met directement à disposition ses paramètres afin de pouvoir les modifier facilement.</p>\n<p>Ainsi, nous pourrons définir la couleur de remplissage dans <strong>ctx.fillStyle</strong> et la couleur de trait dans <strong>ctx.strokeStyle</strong>.</p>\n<h2 id=\"commençons-à-coder\">Commençons à coder</h2>\n<p>Avant d’attaquer l’animation, nous allons commencer à manier les <strong>outils de tracage</strong>.</p>\n<h3 id=\"chemins-et-traits-simples\">Chemins et traits simples</h3>\n<p>Nous allons commencer par tracer un trait simple qui va traverser tous le canvas.</p>\n<p>Essayez le code suivant:</p>\n<pre><code class=\"language-javascript\">ctx.beginPath();              // commence à tracer un chemin  \nctx.moveTo(, 20);             // défini le premier point de tracage à la position (0, 20)  \nctx.lineTo(canvas.width, 30); // Tracer une ligne jusqu&#39;à la position (canvas.width, 30). canvas.width désigne la largeur du canvas (500 dans notre exemple).  \nctx.stroke();                 // Indique au canvas de dessiner le chemin tracé depuis le beginPath\n</code></pre>\n<p><a href=\"/demo/animate-banner/step1.html\">Voir le résultat</a></p>\n<h3 id=\"chemins-et-courbes-de-bézier\">Chemins et courbes de bézier</h3>\n<h4 id=\"la-notion-de-courbe-de-bézier\">La notion de courbe de bézier</h4>\n<p>Une courbe de bézier est définie par 4 points :</p>\n<ul>\n<li>  Deux points désignant le début et la fin du trait.</li>\n<li>  Deux points appelés <strong>poignées</strong> permettant de contrôler la courbe.</li>\n</ul>\n<p><img src=\"/demo/animate-banner/bezier-schema.png\" alt=\"\"></p>\n<h4 id=\"application-en-canvas\">Application en canvas</h4>\n<p>Essayez le code suivant :</p>\n<pre><code class=\"language-javascript\">ctx.beginPath();  \nctx.moveTo(, 20);  \nctx.bezierCurveTo(canvas.width/3, canvas.height, 2*canvas.width/3, , canvas.width, 20);  \nctx.stroke();\n</code></pre>\n<p><a href=\"/demo/animate-banner/step2.html\">Voir le résultat</a></p>\n<p><strong>De la même façon, la procédure consiste à:</strong></p>\n<ul>\n<li>commencer un chemin,</li>\n<li>se placer à une certaine position,</li>\n<li>effectuer un traçage (courbe de bézier),</li>\n<li>terminer le traçage (<strong>ctx.stroke()</strong>).</li>\n</ul>\n<p>Intéressons nous plus particulièrement au traçage de la courbe de bézier avec l’appel de <strong>ctx.bezierCurveTo</strong>.</p>\n<h5 id=\"beziercurvetocp1x-cp1y-cp2x-cp2y-x-y\">bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</h5>\n<p>Cette fonction prends en argument les coordonnées du premier point de contrôle <strong>(cp1x, cp1y)</strong>, du deuxième point de contrôle <strong>(cp2x, cp2y)</strong> et du point final <strong>(x, y)</strong>. A noter que le point de début est le point sur lequel on s’est placé au moyen de <strong>moveTo</strong>.</p>\n<p><strong>Dans notre exemple, les deux points de contrôle sont placés ainsi :</strong></p>\n<p><img src=\"/demo/animate-banner/bezier-exemple.png\" alt=\"\"></p>\n<h3 id=\"ajout-de-lanimation\">Ajout de l’animation</h3>\n<p>Pour animer notre courbe de bézier, nous allons faire varier les 4 points de notre courbe en fonction du temps.</p>\n<p>En javascript, il y a deux moyen d’effectuer une animation :</p>\n<ul>\n<li><del>Au moyen de <strong>setInterval</strong> permettant d’appeler une fonction par interval de temps régulier.</del></li>\n<li><del>Au moyen de <strong>setTimeout</strong> permettant d’appeler une fonction après un temps donné.</del></li>\n<li><strong>[UPDATE 2011]</strong> Il est maintenant recommandé d’utiliser <strong>requestAnimationFrame</strong> qui est l’équivalent de setTimeout mais destiné à l’animation donc plus performant. <a href=\"http://paulirish.com/2011/requestanimationframe-for-smart-animating/\">Plus d’informations içi (en)</a></li>\n</ul>\n<p>La première approche est parfaite pour une animation <strong>“statique”, avec peu d’intéraction</strong>.</p>\n<p>La seconde approche est intéressante lorsque l’animation <strong>doit être contrôlée</strong> (intéraction). En effet, cette approche consiste à appeler setTimeout à chaque cycle d’animation.</p>\n<p>Nous choisirons d’utiliser <strong>setInterval</strong>, plus simple et plus adaptée à notre tutoriel.</p>\n<h4 id=\"approche-linéaire\">Approche linéaire</h4>\n<p>Commençons simplement par une <strong>évolution linéaire des points</strong>.</p>\n<p>Essayez le code suivant :</p>\n<pre><code class=\"language-javascript\">var i = 0; // variable fonction du temps\nvar cycle = function() {\n  ctx.clearRect(0,0,canvas.width,canvas.height); // clean the canvas\n  var y = Math.abs(canvas.height-i%(2*canvas.height)); // y évolue par rebond entre 0 et canvas.height au cours du temps (linéarité)\n  ctx.beginPath();\n  ctx.moveTo(0, y);\n  ctx.bezierCurveTo(canvas.width/3, canvas.height/2, 2*canvas.width/3, canvas.height/2, canvas.width, y);\n  ctx.stroke();\n  i++;\n};\nsetInterval(cycle, 30); // lance le cycle chaque 30 millisecondes\n</code></pre>\n<p><a href=\"/demo/animate-banner/step3.html\">Voir le résultat</a></p>\n<p>Pour l’instant les poignées sont fixes et l’évolution linéaire de <strong>y</strong> donne un effet de rebond peu intéréssant.</p>\n<p>C’est pour cela que nous abandonnons l’idée d’une évolution linéaire des positions au cours du temps pour l’approche sinusoïdale.</p>\n<h4 id=\"approche-sinusoïdale\">Approche sinusoïdale</h4>\n<p>Comme nous l’avons vu, l’évolution linéaire n’est pas adaptée pour ce genre d’animation (effet de rebond). Il faudrait rendre l’animation plus fluide.</p>\n<p>Pour cela, nous allons utiliser <strong>une évolution sinusoïdale des positions au cours du temps</strong>.</p>\n<p>Essayez le code suivant :</p>\n<pre><code class=\"language-javascript\">var i = 0; // variable fonction du temps\nvar cycle = function() {\n  ctx.clearRect(0,0,canvas.width,canvas.height);\n  var offset = i/20;\n  var y = (Math.sin(offset)+1)*canvas.height/2; // y varie de 0 à canvas.height\n  var cpy1 = (Math.cos(offset)+0.5)*canvas.height; // les poignées évoluent également de façon sinusoïdale\n  var cpy2 = canvas.height - cpy1;\n  ctx.beginPath();\n  ctx.moveTo(0, y);\n  ctx.bezierCurveTo(canvas.width/3, cpy1, 2*canvas.width/3, cpy2, canvas.width, y);\n  ctx.stroke();\n  i++;\n};\nsetInterval(cycle, 30);\n</code></pre>\n<p><a href=\"/demo/animate-banner/step4.html\">Voir le résultat</a></p>\n<h3 id=\"peaufinage\">Peaufinage</h3>\n<h4 id=\"amélioration-du-style-du-trait\">Amélioration du style du trait</h4>\n<p>Essayez le code suivant :</p>\n<pre><code class=\"language-javascript\">ctx.strokeStyle = &#39;rgba(80,150,240,0.5)&#39;; // couleur bleu avec opacité de 50%\nctx.lineWidth = 5; // épaisseur de trait de 5 pixels\nvar i = 0;\nvar cycle = function() {\n  ctx.clearRect(0,0,canvas.width,canvas.height);\n  var offset = i/20;\n  var y = (Math.sin(offset)+1)*canvas.height/2;\n  var cpy1 = (Math.cos(offset)+0.5)*canvas.height;\n  var cpy2 = canvas.height - cpy1;\n  ctx.beginPath();\n  ctx.moveTo(0, y);\n  ctx.bezierCurveTo(canvas.width/3, cpy1, 2*canvas.width/3, cpy2, canvas.width, y);\n  ctx.stroke();\n  i++;\n};\nsetInterval(cycle, 30);\n</code></pre>\n<p><a href=\"/demo/animate-banner/step5.html\">Voir le résultat</a></p>\n<h4 id=\"ajout-de-plusieurs-courbes\">Ajout de plusieurs courbes</h4>\n<p>Pour avoir un effet plus accrochant, nous allons ajouter plusieurs courbes de bézier avec un décalage temporel entre elles.</p>\n<p>Nous allons également attribuer plusieurs styles aux différentes courbes.</p>\n<pre><code class=\"language-javascript\">var numberOfLines = 5;\nvar i = 0;\nvar cycle = function() {\n  ctx.clearRect(0,0,canvas.width,canvas.height);\n  for(var j=0; j&lt;numberOfLines; ++j) {\n    var offset = (i+j*10)/20;\n    ctx.lineWidth = 1+2*(numberOfLines-j); // épaisseur variable en fonction de la ligne\n    ctx.strokeStyle = &#39;rgba(80,150,240,&#39;+(j/5+0.1)+&#39;)&#39;; // opacité variable en fonction de la ligne\n    var y = (Math.sin(offset)+1)*canvas.height/2;\n    var cpy1 = (Math.cos(offset)+0.5)*canvas.height;\n    var cpy2 = canvas.height - cpy1;\n    ctx.beginPath();\n    ctx.moveTo(0, y);\n    ctx.bezierCurveTo(canvas.width/3, cpy1, 2*canvas.width/3, cpy2, canvas.width, y);\n    ctx.stroke();\n  }\n  i++;\n};\nsetInterval(cycle, 30);\n</code></pre>\n<p><a href=\"/demo/animate-banner/step6.html\">Voir le résultat</a></p>\n<h3 id=\"aller-plus-loin\">Aller plus loin</h3>\n<p>Il est possible de continuer encore plus loin en ajoutant l’<strong>évolution de plusieurs paramètres en fonction du temps</strong>.\nPour conclure, voici la démonstration finale:</p>\n<pre><code class=\"language-javascript\">var i = 0;\nvar cycle = function() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  for(var j=0; j&lt;numberOfLines; ++j) {\n    ctx.lineWidth = 1+2*(numberOfLines-j);\n    ctx.strokeStyle = &#39;rgba(100,200,&#39;+Math.floor(Math.abs(Math.cos(i/80)*256))+&#39;,&#39;+(j/5+0.1)+&#39;)&#39;;\n    var offset = (i+j*10*Math.abs(Math.cos(i/100)))/20;\n    var y = (Math.sin(offset)+1)*canvas.height/2;\n    var cpy1 = (Math.cos(offset)+0.5)*canvas.height;\n    var cpy2 = canvas.height - cpy1;\n    ctx.beginPath();\n    ctx.moveTo(0, y);\n    ctx.bezierCurveTo(canvas.width/3, cpy1, 2*canvas.width/3, cpy2, canvas.width, y);\n    ctx.stroke();\n  }\n  i++;\n};\nsetInterval(cycle, 30);\n</code></pre>\n<p><a href=\"/demo/animate-banner/final.html\">Voir le résultat</a></p>\n<p>Nous avons ajouté:</p>\n<ul>\n<li>L’évolution de la <strong>couleur</strong> au cours du temps.</li>\n<li>L’évolution du <strong>décalage entre les courbes</strong> au cours du temps.</li>\n</ul>\n","data":{"title":"Tutoriel Canvas : Réaliser une bannière animée en quelques lignes de code","thumbnail":"/images/2010/animated_banner.png","description":"Ce tutoriel vise à présenter canvas comme une librairie très simple d’utilisation et haut niveau grâce au langage javascript.","author":"Gaetan","layout":"post","permalink":"/2010/02/tutoriel-canvas-realiser-une-banniere-animee-en-quelques-lignes-de-code","tags":["animation","canvas","javascript","bezier"]}},"__N_SSG":true}